package inventory

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/warehouse/domain/entities/inventory"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Checks          []*viewmodels.Check
	PaginationState *pagination.State
}

func inventoryCheckHref(check *viewmodels.Check) string {
	return fmt.Sprintf("/warehouse/inventory/%s", check.ID)
}

templ InventoryTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col gap-4 table-wrapper">
		if len(props.Checks) == 0 {
			@base.TableEmptyState(base.TableEmptyStateProps{
				Title:       pageCtx.T("WarehouseInventory.List.NoInventory.Title"),
				Description: pageCtx.T("WarehouseInventory.List.NoInventory.Description"),
			})
		} else {
			@base.Table(base.TableProps{
				Columns: []*base.TableColumn{
					{Label: pageCtx.T("WarehouseInventory.List.Name"), Key: "name"},
					{Label: pageCtx.T("WarehouseInventory.List.Status"), Key: "status"},
					{Label: pageCtx.T("WarehouseInventory.List.CreatedBy"), Key: "createdBy"},
					{Label: pageCtx.T("WarehouseInventory.List.FinishedBy"), Key: "finishedBy"},
					{Label: pageCtx.T("Actions"), Class: "w-16"},
				},
			}) {
				for _, check := range props.Checks {
					@base.TableRow(base.TableRowProps{}) {
						@base.TableCell(base.TableCellProps{}) {
							{ check.Name }
						}
						@base.TableCell(base.TableCellProps{}) {
							<div
								class={ "text-sm max-w-fit px-2 py-1 rounded-md font-medium",
								templ.KV("bg-green-100 text-green-600", check.Status == string(inventory.Success)),
								templ.KV("bg-yellow-100 text-yellow-700", check.Status == string(inventory.Incomplete)),
								templ.KV("bg-red-100 text-red-500", check.Status == string(inventory.Failed)) }
							>
								{ check.LocalizedStatus(pageCtx.Localizer) }
							</div>
						}
						@base.TableCell(base.TableCellProps{}) {
							{ check.CreatedBy.FullName() }
						}
						@base.TableCell(base.TableCellProps{}) {
							if check.FinishedBy != nil {
								{ check.FinishedBy.FullName() }
							}
						}
						@base.TableCell(base.TableCellProps{}) {
							@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/warehouse/inventory/%s", check.ID)}) {
								@icons.PencilSimple(icons.Props{Size: "20"})
							}
						}
					}
				}
			}
			if len(props.PaginationState.Pages()) > 1 {
				@pagination.Pagination(props.PaginationState)
			}
		}
	</div>
}

templ InventoryContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.T("NavigationLinks.WarehouseInventory") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/warehouse/inventory"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@filters.Search([]filters.SearchField{
					{
						Label: pageCtx.T("WarehouseInventory.List.Name"),
						Key:   "name",
					},
				})
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Status",
					},
				}) {
					<option selected disabled>{ pageCtx.T("WarehouseInventory.List.SelectStatus") }</option>
					<option value="">{ pageCtx.T("All") }</option>
					<option value={ string(inventory.Success) }>
						{ pageCtx.T("WarehouseInventory.Single.Statuses.success") }
					</option>
					<option value={ string(inventory.Incomplete) }>
						{ pageCtx.T("WarehouseInventory.Single.Statuses.incomplete") }
					</option>
					<option value={ string(inventory.Failed) }>
						{ pageCtx.T("WarehouseInventory.Single.Statuses.failed") }
					</option>
				}
				@filters.PageSize()
				@filters.CreatedAt()
				@button.Primary(button.Props{
					Size: button.SizeNormal, Href: "/warehouse/inventory/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.T("WarehouseInventory.List.New") }
				}
			</form>
			@InventoryTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("WarehouseInventory.List.Meta.Title")},
	}) {
		@InventoryContent(props)
	}
}
