package positions

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Positions       []*viewmodels.Position
	Units           []*viewmodels.Unit
	PaginationState *pagination.State
}

templ PositionsTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col gap-4 table-wrapper">
		if len(props.Positions) == 0 {
			@base.TableEmptyState(base.TableEmptyStateProps{
				Title:       pageCtx.T("WarehousePositions.List.NoPositions.Title"),
				Description: pageCtx.T("WarehousePositions.List.NoPositions._Description"),
			})
		} else {
			@base.Table(base.TableProps{
				Columns: []*base.TableColumn{
					{Label: "", Key: "title"},
					{Label: pageCtx.T("WarehousePositions.List.Position"), Key: "title"},
					{Label: pageCtx.T("WarehousePositions.List.Barcode"), Key: "barcode"},
					{Label: pageCtx.T("WarehousePositions.List.Unit"), Key: "unit"},
					{Label: pageCtx.T("UpdatedAt"), Key: "updatedAt"},
					{Label: pageCtx.T("Actions"), Class: "w-16"},
				},
			}) {
				for _, position := range props.Positions {
					@base.TableRow(base.TableRowProps{}) {
						@base.TableCell(base.TableCellProps{}) {
							if len(position.Images) > 0 {
								<img src={ position.Images[0].URL } class="w-12 h-12"/>
							}
						}
						@base.TableCell(base.TableCellProps{}) {
							{ position.Title }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ position.Barcode }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ position.Unit.Title }
						}
						@base.TableCell(base.TableCellProps{}) {
							<div x-data="relativeformat">
								<span x-text={ fmt.Sprintf("format('%s')", position.UpdatedAt) }></span>
							</div>
						}
						@base.TableCell(base.TableCellProps{}) {
							@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/warehouse/positions/%s", position.ID)}) {
								@icons.PencilSimple(icons.Props{Size: "20"})
							}
						}
					}
				}
			}
			if len(props.PaginationState.Pages()) > 1 {
				@pagination.Pagination(props.PaginationState)
			}
		}
	</div>
}

templ PositionsContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<div class="flex justify-between items-center gap-3">
			<h1 class="text-2xl font-medium">
				{ pageCtx.T("NavigationLinks.WarehousePositions") }
			</h1>
			@button.Primary(button.Props{
				Size: button.SizeNormal, Href: "/warehouse/positions/import",
				Icon: icons.FileXls(icons.Props{Size: "18"}),
			}) {
				{ pageCtx.T("WarehousePositions.List.Import") }
			}
		</div>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/warehouse/positions"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@filters.Search([]filters.SearchField{
					{
						Label: pageCtx.T("WarehousePositions.List.Position"),
						Key:   "title",
					},
					{
						Label: pageCtx.T("WarehousePositions.List.Barcode"),
						Key:   "barcode",
					},
				})
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "UnitID",
					},
				}) {
					<option selected disabled>{ pageCtx.T("WarehousePositions.Single.SelectUnit") }</option>
					<option value="">{ pageCtx.T("All") }</option>
					for _, unit := range props.Units {
						<option value={ unit.ID }>{ unit.Title }</option>
					}
				}
				@filters.PageSize()
				@filters.CreatedAt()
				@button.Primary(button.Props{
					Size: button.SizeNormal, Href: "/warehouse/positions/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.T("WarehousePositions.List.New") }
				}
			</form>
			@PositionsTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("WarehousePositions.List.Meta.Title")},
	}) {
		@PositionsContent(props)
	}
}
