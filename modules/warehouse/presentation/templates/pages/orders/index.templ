package orders

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/warehouse/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Orders          []*viewmodels.Order
	PaginationState *pagination.State
}

templ OrdersTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col gap-4 table-wrapper">
		if len(props.Orders) == 0 {
			@base.TableEmptyState(base.TableEmptyStateProps{
				Title:       pageCtx.T("WarehouseOrders.List.NoOrders.Title"),
				Description: pageCtx.T("WarehouseOrders.List.NoOrders.Description"),
			})
		} else {
			@base.Table(base.TableProps{
				Columns: []*base.TableColumn{
					{Label: pageCtx.T("WarehouseOrders.List.Type"), Key: "title"},
					{Label: pageCtx.T("WarehouseOrders.List.Status"), Key: "shortTitle"},
					{Label: pageCtx.T("WarehouseOrders.List.Positions"), Key: "positions"},
					{Label: pageCtx.T("WarehouseOrders.List.Products"), Key: "products"},
					{Label: pageCtx.T("CreatedAt"), Key: "updatedAt"},
					{Label: pageCtx.T("Actions"), Class: "w-16"},
				},
			}) {
				for _, order := range props.Orders {
					@base.TableRow(base.TableRowProps{}) {
						@base.TableCell(base.TableCellProps{}) {
							{ order.LocalizedType(pageCtx.Localizer) }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ order.LocalizedStatus(pageCtx.Localizer) }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ order.DistinctPositions() }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ order.TotalProducts() }
						}
						@base.TableCell(base.TableCellProps{}) {
							<div x-data="relativeformat">
								<span x-text={ fmt.Sprintf("format('%s')", order.CreatedAt) }></span>
							</div>
						}
						@base.TableCell(base.TableCellProps{}) {
							@button.Secondary(button.Props{
								Fixed: true,
								Size:  button.SizeSM,
								Class: "btn-fixed",
								Href:  fmt.Sprintf("/warehouse/orders/%s", order.ID),
							}) {
								@icons.Eye(icons.Props{Size: "20"})
							}
						}
					}
				}
			}
			if len(props.PaginationState.Pages()) > 1 {
				@pagination.Pagination(props.PaginationState)
			}
		}
	</div>
}

templ newOrderButton() {
	<summary class="btn btn-primary btn-normal btn-with-icon shrink-0 cursor-pointer">
		@icons.PlusCircle(icons.Props{Size: "18"})
		<p class="break-keep">
			{ composables.MustT(ctx, "WarehouseOrders.List.New") }
		</p>
	</summary>
}

templ OrdersContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.T("NavigationLinks.WarehouseOrders") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/warehouse/orders"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Status",
					},
				}) {
					<option disabled selected>{ pageCtx.T("WarehouseOrders.List.Status") }</option>
					<option value="">
						{ pageCtx.T("All") }
					</option>
					<option value="pending">
						{ pageCtx.T("WarehouseOrders.Statuses.pending") }
					</option>
					<option value="complete">
						{ pageCtx.T("WarehouseOrders.Statuses.complete") }
					</option>
				}
				@base.Select(&base.SelectProps{
					Attrs: templ.Attributes{
						"name": "Type",
					},
				}) {
					<option disabled selected>{ pageCtx.T("WarehouseOrders.List.Type") }</option>
					<option value="">
						{ pageCtx.T("All") }
					</option>
					<option value="in">
						{ pageCtx.T("WarehouseOrders.Types.in") }
					</option>
					<option value="out">
						{ pageCtx.T("WarehouseOrders.Types.out") }
					</option>
				}
				@filters.PageSize()
				@filters.CreatedAt()
				<div class="flex-grow"></div>
				@base.DetailsDropdown(&base.DetailsDropdownProps{
					Summary: newOrderButton(),
					Classes: templ.CSSClasses{"z-10"},
				}) {
					@base.DropdownItem(base.DropdownItemProps{Href: "/warehouse/orders/in/new"}) {
						{ pageCtx.T("WarehouseOrders.List.NewIn") }
					}
					@base.DropdownItem(base.DropdownItemProps{Href: "/warehouse/orders/out/new"}) {
						{ pageCtx.T("WarehouseOrders.List.NewOut") }
					}
				}
			</form>
			@OrdersTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("WarehouseOrders.List.Meta.Title")},
	}) {
		@OrdersContent(props)
	}
}
