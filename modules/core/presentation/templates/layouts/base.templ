package layouts

import (
	"github.com/iota-uz/iota-sdk/modules/core/presentation/assets"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

var (
	favicon = "/assets/" + assets.HashFS.HashName("images/favicon.ico")

	apexCss      = "/assets/" + assets.HashFS.HashName("css/apexcharts.css")
	flatpickrCss = "/assets/" + assets.HashFS.HashName("css/flatpickr.css")
	mainCss      = "/assets/" + assets.HashFS.HashName("css/main.min.css")

	alpine      = "/assets/" + assets.HashFS.HashName("js/alpine.js")
	htmx        = "/assets/" + assets.HashFS.HashName("js/lib/htmx.min.js")
	htmxSSE     = "/assets/" + assets.HashFS.HashName("js/lib/htmx-sse.js")
	htmxStream  = "/assets/" + assets.HashFS.HashName("js/lib/htmx-stream.js")
	htmxPreload = "/assets/" + assets.HashFS.HashName("js/lib/htmx.preload.js")
	apexJs      = "/assets/" + assets.HashFS.HashName("js/lib/apexcharts.min.js")
	chartEvents = "/assets/" + assets.HashFS.HashName("js/lib/chart-events.js")
	htmxWS      = "/assets/" + assets.HashFS.HashName("js/lib/htmx.ws.js")
)

templ DefaultHead() {
	<link rel="icon" type="image/x-icon" href={ favicon }/>
	<link rel="stylesheet" href={ apexCss }/>
	<link rel="stylesheet" href={ flatpickrCss }/>
	<link rel="stylesheet" href={ mainCss }/>
	<link rel="preload" href="/assets/fonts/Gilroy/Gilroy-Regular.woff2" as="font" type="font/woff2" crossorigin/>
	<link rel="preload" href="/assets/fonts/Gilroy/Gilroy-Medium.woff2" as="font" type="font/woff2" crossorigin/>
	<link rel="preload" href="/assets/fonts/Gilroy/Gilroy-Semibold.woff2" as="font" type="font/woff2" crossorigin/>
	<script defer type="module" src={ alpine }></script>
	<script src={ htmx }></script>
	<script src={ htmxPreload }></script>
	<script src={ htmxSSE }></script>
	<script src={ htmxStream }></script>
	<script src={ apexJs }></script>
	<script defer src={ chartEvents }></script>
	<script src={ htmxWS }></script>
}

type BaseProps struct {
	Title        string
	WebsocketURL string
}

templ Base(props *BaseProps) {
	<!DOCTYPE html>
	<html
		lang={ composables.UsePageCtx(ctx).Locale.String() }
		class="system bg-surface-100 text-100"
	>
		<head>
			<title>{ props.Title }</title>
			<meta charset="UTF-8"/>
			<meta name="viewport" content="width=device-width, initial-scale=1.0"/>
			@MustUseHead(ctx)
		</head>
		<body
			class="antialiased overflow-y-hidden"
			hx-ext="ws"
			ws-connect={ props.WebsocketURL }
		>
			{ children... }
		</body>
	</html>
}
