package layouts

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/avatar"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/toast"
	"github.com/iota-uz/iota-sdk/components/sidebar"
	"github.com/iota-uz/iota-sdk/components/spotlight"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/mappers"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

var (
	navbarOnce = templ.NewOnceHandle()
)

templ Avatar() {
	{{
		u := mappers.UserToViewModel(composables.MustUseUser(ctx))
		var url string
		if u.Avatar != nil {
			url = u.Avatar.URL
		}
	}}
	<summary class="flex items-center justify-center cursor-pointer">
		@avatar.Avatar(avatar.Props{
			ImageURL: url,
			Initials: u.Initials(),
		})
	</summary>
}

templ ThemeSwitcher() {
	<div class="flex items-center justify-center relative">
		<input
			class="peer/system appearance-none absolute"
			type="radio"
			name="theme"
			value="system"
			id="theme-system"
			onchange="onThemeChange(this)"
			checked
		/>
		<label
			for="theme-light"
			class="group/system absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/system:visible"
		>
			@icons.Desktop(icons.Props{
				Size:  "20",
				Class: "scale-0 duration-200 peer-checked/system:group-[]/system:scale-100",
			})
		</label>
		<input
			class="peer/light appearance-none absolute"
			type="radio"
			name="theme"
			value="light"
			id="theme-light"
			onchange="onThemeChange(this)"
		/>
		<label
			for="theme-dark"
			class="group/light absolute flex items-center justify-center w-9 h-9 rounded-full bg-gray-200 text-black invisible peer-checked/light:visible"
		>
			@icons.Sun(icons.Props{
				Size:    "20",
				Variant: icons.Filled,
				Class:   "scale-0 duration-200 peer-checked/light:group-[]/light:scale-100",
			})
		</label>
		<input
			class="peer/dark appearance-none absolute"
			type="radio"
			name="theme"
			value="dark"
			id="theme-dark"
			onchange="onThemeChange(this)"
		/>
		<label
			for="theme-system"
			class="group/dark absolute flex items-center justify-center w-9 h-9 rounded-full bg-black-950 text-white invisible peer-checked/dark:visible"
		>
			@icons.Moon(icons.Props{
				Size:       "20",
				Variant:    icons.Filled,
				Class:      "scale-0 duration-200 peer-checked/dark:group-[]/dark:scale-100",
				Attributes: templ.Attributes{"fill": "currentColor"},
			})
		</label>
	</div>
	@navbarOnce.Once() {
		<script>
			let THEME_STORAGE_KEY = "iota-theme";
			let savedTheme = window.localStorage.getItem(THEME_STORAGE_KEY);
			let initialTheme = savedTheme ?? "system";
			let root = document.documentElement;
			let previousTheme = initialTheme;
			let radioInput = document.getElementById(`theme-${initialTheme}`);
			function changeTheme(theme) {
				root.classList.remove(previousTheme);
				if (!theme) theme = initialTheme;
				window.localStorage.setItem(THEME_STORAGE_KEY, theme);
				root.classList.add(theme)
				previousTheme = theme;
			}
			function onThemeChange(input) {
				changeTheme(input.value);
			}
			if (radioInput) {
				radioInput.checked = true;
				changeTheme(initialTheme);
			}
		</script>
	}
}

templ SidebarTrigger(class string) {
	<button
		x-data
		class={
			"flex items-center justify-center w-9 h-9 rounded-md bg-surface-400 text-black cursor-pointer",
			class,
		}
		@click="$dispatch('open-sidebar')"
	>
		@icons.List(icons.Props{Size: "20"})
	</button>
}

templ Navbar(pageCtx *types.PageContext) {
	<section class="h-16 shadow-b-lg border-b w-full flex items-center px-8 bg-surface-300 border-b-primary">
		<div class="ml-auto flex items-center gap-8">
			<div class="hidden lg:block">
				@spotlight.Spotlight()
			</div>
			@ThemeSwitcher()
			@base.DetailsDropdown(&base.DetailsDropdownProps{
				Summary: Avatar(),
				Classes: templ.Classes("z-10"),
			}) {
				@base.DropdownItem(base.DropdownItemProps{Href: "/account"}) {
					{ pageCtx.T("NavigationLinks.Navbar.Profile") }
				}
				@base.DropdownItem(base.DropdownItemProps{Href: "/logout"}) {
					{ pageCtx.T("NavigationLinks.Navbar.Logout") }
				}
			}
			@SidebarTrigger("lg:hidden")
		</div>
	</section>
}

templ DefaultSidebarFooter() {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	@SidebarFooter(pageCtx)
}

templ SidebarFooter(pageCtx *types.PageContext) {
	<!-- Collapsed view: icon only -->
	<div x-show="isCollapsed">
		@button.Sidebar(button.Props{
			Size:  button.SizeMD,
			Class: "p-2 w-auto flex justify-center text-red-500",
			Href:  "/logout",
		}) {
			<div class="w-6 h-6 flex items-center justify-center">
				@icons.SignOut(icons.Props{
					Size: "20",
				})
			</div>
		}
	</div>
	<!-- Expanded view: icon + text -->
	<div x-show="!isCollapsed">
		@button.Sidebar(button.Props{
			Size:  button.SizeMD,
			Class: "w-full justify-center gap-2 text-red-500",
			Href:  "/logout",
		}) {
			@icons.SignOut(icons.Props{
				Size: "20",
			})
			{ pageCtx.T("SignOut") }
		}
	</div>
	{ children... }
}

templ MobileSidebar(props sidebar.Props) {
	@dialog.Drawer(dialog.DrawerProps{
		Direction: dialog.LTR,
		Action:    "open-sidebar",
	}) {
		<div class="w-2/3">
			@sidebar.Sidebar(props)
		</div>
	}
}

templ DefaultSidebarHeader() {
	<div class="flex flex-col items-center justify-center space-y-4">
		<a href="/" class="flex items-center gap-2">
			@MustUseLogo(ctx)
		</a>
	</div>
}

type AuthenticatedProps struct {
	BaseProps
}

templ Authenticated(props AuthenticatedProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		sidebarProps := MustUseSidebarProps(ctx)
	}}
	if props.WebsocketURL == "" {
		{{ props.WebsocketURL = "/ws" }}
	}
	@Base(&props.BaseProps) {
		@toast.Container()
		@MobileSidebar(sidebarProps)
		<div
			x-data="{
				sidebarCollapsed: localStorage.getItem('sidebar-collapsed') === 'true',
				init() {
					this.$nextTick(() => {
						// Listen for storage changes from other tabs
						window.addEventListener('storage', (e) => {
							if (e.key === 'sidebar-collapsed') {
								this.sidebarCollapsed = e.newValue === 'true';
							}
						});
					});
				}
			}"
			@sidebar-toggle="sidebarCollapsed = !sidebarCollapsed"
			:class="{ 'lg:grid-cols-[4rem_1fr]': sidebarCollapsed, 'lg:grid-cols-[280px_1fr]': !sidebarCollapsed }"
			class="grid min-h-screen w-full overflow-y-auto"
		>
			<div class="hidden lg:block">
				@sidebar.Sidebar(sidebarProps)
			</div>
			<div class="flex flex-col h-screen overflow-x-hidden">
				@Navbar(pageCtx)
				<div class="flex-1 overflow-y-auto content">
					{ children... }
				</div>
			</div>
		</div>
	}
}
