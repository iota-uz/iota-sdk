package crud_pages

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/crud"
)

type IndexPageProps[TEntity any] struct {
	BasePath        string
	Schema          crud.Schema[TEntity]
	Rows            [][]crud.FieldValue
	PaginationState *pagination.State
}

templ ListTable[TEntity any](props *IndexPageProps[TEntity]) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		title := pageCtx.TSafe(fmt.Sprintf("%s.List.Empty.Title", props.Schema.Name()))
		if title == "" {
			title = props.Schema.Name()
		}
	}}
	<div class="flex flex-col gap-4 table-wrapper">
		if len(props.Rows) == 0 {
			@base.TableEmptyState(base.TableEmptyStateProps{
				Title:       title,
				Description: pageCtx.TSafe(fmt.Sprintf("%s.List.Empty._Description", props.Schema.Name())),
			})
		} else {
			{{
				var columns []*base.TableColumn
				for _, field := range props.Schema.Fields().Fields() {
					if !field.Hidden() {
						f := field
						label := pageCtx.TSafe(fmt.Sprintf("%s.List.%s", props.Schema.Name(), f.Name()))
						if label == "" {
							label = f.Name()
						}
						columns = append(columns, &base.TableColumn{
							Label: label,
							Key:   f.Name(),
						})
					}
				}
				columns = append(columns, &base.TableColumn{Label: pageCtx.TSafe("Actions"), Class: "w-16"})
			}}
			@base.Table(base.TableProps{
				Columns: columns,
			}) {
				for _, row := range props.Rows {
					{{
						var primaryKeyValue string
						for _, fv := range row {
							if fv.Field().Key() {
								primaryKeyValue = fmt.Sprintf("%v", fv.Value())
								break
							}
						}
					}}
					@base.TableRow(base.TableRowProps{}) {
						for _, fv := range row {
							if !fv.Field().Hidden() {
								@base.TableCell(base.TableCellProps{}) {
									{ fmt.Sprintf("%v", fv.Value()) }
								}
							}
						}
						@base.TableCell(base.TableCellProps{}) {
							@button.Secondary(button.Props{
								Fixed: true,
								Size:  button.SizeSM,
								Class: "btn-fixed",
								Href:  fmt.Sprintf("/%s/%s", props.BasePath, primaryKeyValue),
							}) {
								@icons.PencilSimple(icons.Props{Size: "20"})
							}
						}
					}
				}
			}
			if len(props.PaginationState.Pages()) > 1 {
				@pagination.Pagination(props.PaginationState)
			}
		}
	</div>
}

templ ListContent[TEntity any](props *IndexPageProps[TEntity]) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.TSafe(fmt.Sprintf("NavigationLinks.%s", props.Schema.Name())) }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get={ props.BasePath }
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				{{
					var fields []filters.SearchField
					for _, field := range props.Schema.Fields().Fields() {
						if field.Searchable() {
							f := field
							label := pageCtx.TSafe(fmt.Sprintf("%s.List.%s", props.Schema.Name(), f.Name()))
							if label == "" {
								label = f.Name()
							}
							fields = append(fields, filters.SearchField{
								Label: label,
								Key:   f.Name(),
							})
						}
					}
				}}
				if len(fields) > 0 {
					@filters.Search(fields)
				}
				@filters.PageSize()
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Href: fmt.Sprintf("%s/new", props.BasePath),
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.TSafe(fmt.Sprintf("%s.List.New", props.Schema.Name())) }
				}
			</form>
			@ListTable(props)
		</div>
	</div>
}

templ Index[TEntity any](props *IndexPageProps[TEntity]) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.TSafe(fmt.Sprintf("%s.List.Meta.Title", props.Schema.Name()))},
	}) {
		@ListContent(props)
	}
}
