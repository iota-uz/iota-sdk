package crud_pages

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/crud"
	"net/url"
	"strconv"
)

type ListPageProps[TEntity any] struct {
	Schema   crud.Schema[TEntity]
	Rows     [][]crud.FieldValue
	Page     int
	PerPage  int
	Total    int64
	HasMore  bool
	BasePath string
	Search   string
}

func mkInfiniteAttrs[TEntity any](props *ListPageProps[TEntity]) templ.Attributes {
	params := url.Values{}
	params.Set("page", strconv.Itoa(props.Page+1))
	params.Set("search", props.Search)
	params.Set("limit", strconv.Itoa(props.PerPage))

	return templ.Attributes{
		"hx-get":     props.BasePath + "?" + params.Encode(),
		"hx-trigger": "intersect once",
		"hx-swap":    "afterend",
		"hx-target":  "this",
	}
}

templ EntityRow[TEntity any](schema crud.Schema[TEntity], row []crud.FieldValue, basePath string, rowProps *base.TableRowProps) {
	{{
		// Find the primary key field
		var primaryKeyValue string
		for _, fv := range row {
			if fv.Field().Key() {
				primaryKeyValue = fmt.Sprintf("%v", fv.Value())
				break
			}
		}

		rowProps.Attrs["id"] = fmt.Sprintf("entity-%s", primaryKeyValue)
		rowProps.Attrs["hx-get"] = fmt.Sprintf("%s/%s", basePath, primaryKeyValue)
		rowProps.Attrs["hx-target"] = "body"
		rowProps.Attrs["hx-swap"] = "beforeend"
		rowProps.Attrs["class"] = "cursor-pointer hover:bg-surface-600"
	}}
	@base.TableRow(*rowProps) {
		for _, fv := range row {
			if !fv.Field().Hidden() {
				@base.TableCell(base.TableCellProps{}) {
					<span>{ fmt.Sprintf("%v", fv.Value()) }</span>
				}
			}
		}
	}
}

templ EntityRows[TEntity any](props *ListPageProps[TEntity]) {
	for ix, row := range props.Rows {
		{{
			isLastRow := ix == len(props.Rows)-1
			rowProps := &base.TableRowProps{
				Attrs: templ.Attributes{},
			}
			if isLastRow && props.HasMore {
				rowProps.Attrs = mkInfiniteAttrs(props)
			}
		}}
		@EntityRow(props.Schema, row, props.BasePath, rowProps)
	}
}

templ EntitiesTable[TEntity any](props *ListPageProps[TEntity]) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	if len(props.Rows) == 0 {
		@base.TableEmptyState(base.TableEmptyStateProps{
			Title:       pageCtx.TSafe(fmt.Sprintf("%s.List.NoEntities.Title", props.Schema.Name)),
			Description: pageCtx.TSafe(fmt.Sprintf("%s.List.NoEntities.Desc", props.Schema.Name)),
		})
	} else {
		{{
			// Build columns from schema fields
			var columns []*base.TableColumn
			for _, field := range props.Schema.Fields().Fields() {
				if !field.Hidden() {
					columns = append(columns, &base.TableColumn{
						Label: field.Name(),
						Key:   field.Name(),
					})
				}
			}
		}}
		@base.Table(base.TableProps{
			Columns: columns,
		}) {
			<tbody id="entities-table-body">
				@EntityRows(props)
			</tbody>
		}
	}
}

templ ListContent[TEntity any](props *ListPageProps[TEntity]) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<div class="flex justify-between md:justify-start">
			<h1 class="text-2xl font-medium">
				{ props.Schema.Name() }
			</h1>
			<div class="flex md:hidden gap-2">
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
					Attrs: templ.Attributes{
						"hx-get":    props.BasePath + "/new",
						"hx-target": "body",
						"hx-swap":   "beforeend",
					},
				})
			</div>
		</div>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get={ props.BasePath }
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target="table"
				hx-swap="outerHTML"
			>
				<input type="hidden" name="page" value="1"/>
				<div class="flex-1">
					@input.Text(&input.Props{
						AddonLeft: &input.Addon{
							Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
						},
						Placeholder: pageCtx.TSafe("Search"),
						Attrs: templ.Attributes{
							"name":  "search",
							"value": props.Search,
						},
					})
				</div>
				<div class="hidden md:flex gap-3">
					@button.Primary(button.Props{
						Size: button.SizeNormal,
						Icon: icons.PlusCircle(icons.Props{Size: "18"}),
						Attrs: templ.Attributes{
							"hx-get":    props.BasePath + "/new",
							"hx-target": "body",
							"hx-swap":   "beforeend",
						},
					}) {
						{ pageCtx.TSafe(fmt.Sprintf("%s.List.New", props.Schema.Name)) }
					}
				</div>
			</form>
			@EntitiesTable(props)
		</div>
	</div>
}

templ Index[TEntity any](props *ListPageProps[TEntity]) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.TSafe(fmt.Sprintf("%s.Meta.List.Title", props.Schema.Name)) },
	}) {
		@ListContent(props)
	}
}
