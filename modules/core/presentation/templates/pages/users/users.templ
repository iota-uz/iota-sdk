package users

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/avatar"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"net/url"
	"strconv"
)

type IndexPageProps struct {
	Users   []*viewmodels.User
	Groups  []*viewmodels.Group
	Page    int
	PerPage int
	HasMore bool
}

func mkInfiniteAttrs(props *IndexPageProps) templ.Attributes {
	params := url.Values{}
	params.Set("page", strconv.Itoa(props.Page+1))
	params.Set("limit", strconv.Itoa(props.PerPage))

	return templ.Attributes{
		"hx-get":     "/users?" + params.Encode(),
		"hx-trigger": "intersect once",
		"hx-swap":    "afterend",
		"hx-target":  "this",
	}
}

templ UserCreatedEvent(user *viewmodels.User, rowProps *base.TableRowProps) {
	<tbody hx-swap-oob="afterbegin:#users-table-body">
		@UserRow(user, rowProps)
	</tbody>
}

templ UserRow(user *viewmodels.User, rowProps *base.TableRowProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		rowProps.Attrs["id"] = fmt.Sprintf("user-%s", user.ID)
		rowProps.Attrs["class"] = "hide-on-load"
	}}
	@base.TableRow(*rowProps) {
		@base.TableCell(base.TableCellProps{}) {
			<div class="flex items-center gap-3">
				@avatar.Avatar(avatar.Props{
					Initials: user.Initials(),
					Class:    templ.Classes("w-8 h-8 min-w-8 !bg-avatar text-avatar"),
				})
				<span>
					{ user.FullName() }
				</span>
			</div>
		}
		@base.TableCell(base.TableCellProps{}) {
			if user.LastAction != "" {
				<div>
					{ user.RolesVerbose() }
				</div>
			} else {
				{ pageCtx.T("Unknown") }
			}
		}
		@base.TableCell(base.TableCellProps{}) {
			<div x-data="relativeformat">
				<span x-text={ fmt.Sprintf("format('%s')", user.CreatedAt) }></span>
			</div>
		}
		@base.TableCell(base.TableCellProps{}) {
			@button.Secondary(button.Props{
				Fixed: true,
				Size:  button.SizeSM,
				Class: "btn-fixed",
				Href:  fmt.Sprintf("/users/%s", user.ID),
			}) {
				@icons.PencilSimple(icons.Props{Size: "20"})
			}
		}
	}
}

templ UserRows(props *IndexPageProps) {
	<tr class="hidden">
		<td colspan="4">
			@loaders.Spinner(loaders.SpinnerProps{
				ContainerClass: templ.Classes(
					"flex justify-center items-center py-4",
				),
			})
		</td>
	</tr>
	for ix, user := range props.Users {
		{{
			isLastRow := ix == len(props.Users)-1
			rowProps := &base.TableRowProps{
				Attrs: templ.Attributes{},
			}
			if isLastRow && props.HasMore {
				rowProps.Attrs = mkInfiniteAttrs(props)
			}
		}}
		@UserRow(user, rowProps)
	}
}

templ UsersTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Table(base.TableProps{
		Columns: []*base.TableColumn{
			{Label: pageCtx.T("Users.List.FullName"), Key: "fullName"},
			{Label: pageCtx.T("Users.List.Roles"), Key: "roles"},
			{Label: pageCtx.T("CreatedAt"), Key: "createdAt"},
			{Label: pageCtx.T("Actions"), Class: "w-16"},
		},
		TBodyAttrs: templ.Attributes{
			"id": "users-table-body",
		},
	}) {
		@UserRows(props)
	}
}

templ GroupFilter(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="bg-surface-600 border border-primary rounded-lg p-4 mb-4">
		<form
			hx-get="/users"
			hx-target="#users-table-wrapper"
			hx-swap="innerHTML"
			hx-push-url="true"
			hx-indicator="#users-table-body"
			hx-trigger="change"
			x-data="checkboxes"
			x-init="init"
			x-on:DOMNodeRemoved="destroy"
		>
			<div class="space-y-3">
				<div>
					@input.Checkbox(&input.CheckboxProps{
						Label: pageCtx.T("Users.List.AllGroups"),
						ID:    "all-users-checkbox",
						Attrs: templ.Attributes{
							"class":   "parent",
							"x-ref":   "parent",
							"@change": "onParentChange",
						},
					})
				</div>
				<hr class="my-3 border-t border-surface-400"/>
				<div class="space-y-3">
					for _, group := range props.Groups {
						@input.Checkbox(&input.CheckboxProps{
							Label: group.Name,
							ID:    fmt.Sprintf("group-%s", group.ID),
							Attrs: templ.Attributes{
								"name":    "groupID",
								"value":   group.ID,
								"@change": "onChange",
							},
						}) {
							<span class="text-xs bg-surface-300 px-2 py-0.5 rounded-full ml-2">
								{ fmt.Sprintf("%d", group.UsersCount()) }
							</span>
						}
					}
				</div>
			</div>
		</form>
	</div>
}

templ UsersContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="bg-surface-600 border border-primary rounded-lg">
		<form
			class="p-4 flex items-center gap-3"
			hx-get="/users"
			hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
			hx-target="#users-table-body"
			hx-swap="innerHTML"
			hx-indicator="#users-table-body"
		>
			<input type="hidden" name="page" value="1"/>
			<div class="flex-1">
				@input.Text(&input.Props{
					AddonLeft: &input.Addon{
						Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
					},
					Placeholder: pageCtx.T("Search"),
					Attrs: templ.Attributes{
						"name": "Search",
					},
				})
			</div>
			<div class="hidden md:flex gap-3">
				@filters.CreatedAt()
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Href: "/users/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.T("Users.List.New") }
				}
			</div>
		</form>
		@UsersTable(props)
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Users.Meta.List.Title")},
	}) {
		@filters.Drawer(filters.DrawerProps{
			Heading: "Filters",
			Action:  "open-user-filters",
		}) {
			@filters.CreatedAt()
		}
		<div class="m-6">
			<div class="flex justify-between md:justify-start">
				<h1 class="text-2xl font-medium">
					{ pageCtx.T("NavigationLinks.Users") }
				</h1>
				<div class="flex md:hidden gap-2">
					@button.Secondary(button.Props{
						Size:  button.SizeNormal,
						Class: "bg-transparent",
						Icon:  icons.List(icons.Props{Size: "18"}),
						Attrs: templ.Attributes{
							"x-data": "",
							"@click": "$dispatch('open-user-filters')",
						},
					})
					@button.Primary(button.Props{
						Size: button.SizeNormal,
						Href: "/users/new",
						Icon: icons.PlusCircle(icons.Props{Size: "18"}),
					})
				</div>
			</div>
			<div class="mt-5 flex space-x-5">
				<!-- Left sidebar with group filters -->
				<div class="hidden md:block w-64 flex-shrink-0">
					@GroupFilter(props)
				</div>
				<!-- Main content area with user list -->
				<div class="flex-1" id="users-table-wrapper">
					@UsersContent(props)
				</div>
			</div>
		</div>
	}
}
