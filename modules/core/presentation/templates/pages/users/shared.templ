package users

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type RoleSelectProps struct {
	Roles    []*viewmodels.Role
	Selected []*viewmodels.Role
	Name     string
	Form     string
	Error    string
}

func isRoleSelected(id string, roles []*viewmodels.Role) bool {
	for _, role := range roles {
		if role.ID == id {
			return true
		}
	}
	return false
}

templ RoleSelect(props *RoleSelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Combobox(base.ComboboxProps{
		Label:       pageCtx.T("Users.Single.RoleIDs"),
		Placeholder: pageCtx.T("Users.Single.SelectRole"),
		Multiple:    true,
		Name:        props.Name,
		Form:        props.Form,
	}) {
		for _, role := range props.Roles {
			if isRoleSelected(role.ID, props.Selected) {
				<option value={ role.ID } selected>{ role.Name }</option>
			} else {
				<option value={ role.ID }>{ role.Name }</option>
			}
		}
	}
}

type SharedProps struct {
	Value string
	Form  string
	Error string
}

type GroupSelectProps struct {
	Groups   []*viewmodels.Group
	Selected []string
	Name     string
	Form     string
	Error    string
}

func isGroupSelected(id string, groups []string) bool {
	for _, groupID := range groups {
		if groupID == id {
			return true
		}
	}
	return false
}

templ GroupSelect(props *GroupSelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Combobox(base.ComboboxProps{
		Label:       pageCtx.T("Users.Single.GroupIDs"),
		Placeholder: pageCtx.T("Users.Single.SelectGroup"),
		Multiple:    true,
		Name:        props.Name,
		Form:        props.Form,
	}) {
		for _, group := range props.Groups {
			if isGroupSelected(group.ID, props.Selected) {
				<option value={ group.ID } selected>{ group.Name }</option>
			} else {
				<option value={ group.ID }>{ group.Name }</option>
			}
		}
	}
}

templ EmailInput(props SharedProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		attrs := templ.Attributes{
			"name":  "Email",
			"value": props.Value,
		}
		if props.Form != "" {
			attrs["form"] = props.Form
		}
	}}
	@input.Email(&input.Props{
		Label: pageCtx.T("Users.Single.Email"),
		Attrs: attrs,
		AddonRight: &input.Addon{
			Component: icons.EnvelopeSimple(icons.Props{
				Size:  "18",
				Class: "text-gray-400",
			}),
		},
		Error: props.Error,
	})
}
