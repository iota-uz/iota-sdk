package dashboard

import (
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/charts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// Monthly Income Chart
templ MonthlyIncomeCard() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	{{
	months := []string{
		pageCtx.T("Dashboard.Months.Jan"),
		pageCtx.T("Dashboard.Months.Feb"),
		pageCtx.T("Dashboard.Months.Mar"),
		pageCtx.T("Dashboard.Months.Apr"),
		pageCtx.T("Dashboard.Months.May"),
		pageCtx.T("Dashboard.Months.Jun"),
		pageCtx.T("Dashboard.Months.Jul"),
		pageCtx.T("Dashboard.Months.Aug"),
		pageCtx.T("Dashboard.Months.Sep"),
	}
	chartOptions := charts.ChartOptions{
		Chart: charts.ChartConfig{
			Type:    "area",
			Height:  "200",
			Toolbar: charts.Toolbar{Show: false},
		},
		Series: []charts.Series{
			{Name: "Доход", Data: []float64{10, 25, 30, 40, 70, 50, 60, 80, 90}},
		},
		XAxis: charts.XAxisConfig{
			Categories: months,
			Labels: charts.LabelFormatter{
				Style: charts.LabelStyle{
					Colors:   "#CBD5E1",
					FontSize: "10px",
				},
			},
			AxisBorder: charts.AxisBorder{
				Show: false,
			},
			AxisTicks: charts.AxisTicks{
				Show: false,
			},
			Crosshairs: charts.Crosshairs{
				Show:     true,
				Width:    1,
				Position: "back",
				Opacity:  0.5,
				Stroke: charts.StrokeStyle{
					Color:     "#818CF8",
					Width:     1,
					DashArray: 5,
				},
			},
		},
		YAxis: charts.YAxisConfig{
			Labels: charts.LabelFormatter{
				Style: charts.LabelStyle{
					Colors:   "#CBD5E1",
					FontSize: "10px",
				},
				Formatter: templ.JSExpression(`function(val) {
					if (val === 0) return "0";
					if (val === 25) return "25k";
					if (val === 50) return "50k";
					if (val === 75) return "75k";
					if (val === 100) return "100k";
					return "";
				}`),
			},
			Show: true,
		},
		Colors: []string{"#818CF8"},
		Stroke: charts.StrokeConfig{
			Curve:  "smooth",
			Width:  3,
			Colors: []string{"#818CF8"},
		},
		Fill: charts.FillConfig{
			Type: "gradient",
			Gradient: charts.GradientConfig{
				ShadeIntensity: 0.8,
				OpacityFrom:    0.2,
				OpacityTo:      0.0,
				Stops:          []int{0, 100},
				ColorStops: []charts.ColorStop{
					{
						Offset:  0,
						Color:   "#818CF8",
						Opacity: 0.2,
					},
					{
						Offset:  100,
						Color:   "#818CF8",
						Opacity: 0.0,
					},
				},
			},
		},
		DataLabels: charts.DataLabels{
			Enabled: false,
		},
		Markers: charts.MarkersConfig{
			Size:         5,
			Colors:       []string{"#818CF8"},
			StrokeColors: "#fff",
			StrokeWidth:  2,
			Hover: charts.HoverConfig{
				Size: 7,
			},
		},
		Tooltip: charts.TooltipConfig{
			Enabled:   true,
			Shared:    true,
			Intersect: false,
			Custom: templ.JSExpression(`function({ series, seriesIndex, dataPointIndex, w }) {
				const value = series[seriesIndex][dataPointIndex];
				return '<div class="bg-black text-white px-2 py-1 rounded text-xs font-bold">' + value.toLocaleString() + '$</div>';
			}`),
			Fixed: charts.Fixed{
				Enabled: false,
			},
			OnDatasetHover: charts.OnDatasetHover{
				HighlightDataSeries: false,
			},
		},
		Grid: charts.GridConfig{
			Show:           true,
			BorderColor:    "#f1f1f1",
			StrokeDashArray: 5,
			Position:       "back",
			XAxis: charts.GridAxis{
				Lines: charts.GridLines{
					Show: true,
				},
			},
			YAxis: charts.GridAxis{
				Lines: charts.GridLines{
					Show: true,
				},
			},
		},
		Legend: charts.LegendConfig{
			Show: false,
		},
	}
	}}
	<div class="md:col-span-2">
		<div class="bg-white shadow rounded-lg">
			<div class="p-4 pb-2">
				<div class="flex justify-between items-center">
					<div>
						<h3 class="text-sm font-medium text-gray-700">{ pageCtx.T("Dashboard.Charts.MonthlyIncome.Title") }</h3>
						<p class="text-xs text-gray-500">{ pageCtx.T("Dashboard.Charts.MonthlyIncome.Average") }</p>
					</div>
					@base.Select(&base.SelectProps{
						Class: "w-auto text-sm",
						Placeholder: pageCtx.T("Dashboard.Charts.MonthlyIncome.Year"),
					}) {
						<option>2024</option>
						<option>2023</option>
						<option>2022</option>
					}
				</div>
			</div>
			<div class="p-4">
				<div class="h-[200px] relative">
					@charts.Chart(charts.Props{Class: "w-full h-[200px]", Options: chartOptions})
				</div>
			</div>
		</div>
	</div>
}