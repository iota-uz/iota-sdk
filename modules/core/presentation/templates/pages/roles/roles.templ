package roles

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Roles  []*viewmodels.Role
	Search string
}

templ RoleRow(role *viewmodels.Role) {
	@base.TableRow(base.TableRowProps{
		Attrs: templ.Attributes{
			"id":    fmt.Sprintf("role-%s", role.ID),
			"class": "hide-on-load",
		},
	}) {
		@base.TableCell(base.TableCellProps{}) {
			{ role.Name }
		}
		@base.TableCell(base.TableCellProps{}) {
			<div x-data="relativeformat">
				<span x-text={ fmt.Sprintf("format('%s')", role.UpdatedAt) }></span>
			</div>
		}
		@base.TableCell(base.TableCellProps{}) {
			@button.Secondary(button.Props{
				Fixed: true,
				Size:  button.SizeSM,
				Class: "btn-fixed",
				Href:  fmt.Sprintf("/roles/%s", role.ID),
			}) {
				@icons.PencilSimple(icons.Props{Size: "20"})
			}
		}
	}
}

templ RoleRows(props *IndexPageProps) {
	<tr class="hidden">
		<td colspan="3">
			@loaders.Spinner(loaders.SpinnerProps{
				ContainerClass: templ.Classes(
					"flex justify-center items-center py-4",
				),
			})
		</td>
	</tr>
	for _, role := range props.Roles {
		@RoleRow(role)
	}
}

templ RolesTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Table(base.TableProps{
		Columns: []*base.TableColumn{
			{Label: pageCtx.T("Roles.List.Name"), Key: "name"},
			{Label: pageCtx.T("UpdatedAt"), Key: "updatedAt"},
			{Label: pageCtx.T("Actions"), Class: "w-16"},
		},
		TBodyAttrs: templ.Attributes{
			"id": "roles-table-body",
		},
	}) {
		@RoleRows(props)
	}
}

templ RolesContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.T("NavigationLinks.Roles") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/roles"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target="#roles-table-body"
				hx-swap="innerHTML"
				hx-indicator="#roles-table-body"
			>
				@input.Text(&input.Props{
					AddonLeft: &input.Addon{
						Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
					},
					Placeholder: pageCtx.T("Search"),
					Attrs: templ.Attributes{
						"name":  "name",
						"value": props.Search,
					},
				})
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Href: "/roles/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.T("Roles.List.New") }
				}
			</form>
			@RolesTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Roles.Meta.List.Title")},
	}) {
		@RolesContent(props)
	}
}
