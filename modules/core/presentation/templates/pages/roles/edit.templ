package roles

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type EditFormProps struct {
	Role                   *viewmodels.Role
	ModulePermissionGroups []*viewmodels.ModulePermissionGroup
	Errors                 map[string]string
}

templ EditForm(props *EditFormProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col justify-between h-[calc(100vh-4rem)]" id="edit-content">
		<div class="flex-1 overflow-y-auto flex flex-col gap-5 p-6">
			@card.Card(card.Props{
				Class: "space-y-3",
			}) {
				@input.Text(&input.Props{
					Label:       pageCtx.T("Roles.Single.Name.Label"),
					Placeholder: pageCtx.T("Roles.Single.Name.Placeholder"),
					Attrs: templ.Attributes{
						"name":  "Name",
						"value": props.Role.Name,
						"form":  "save-form",
					},
					Error: props.Errors["Name"],
				})
				@input.TextArea(&input.TextAreaProps{
					Label:       pageCtx.T("Roles.Single._Description.Label"),
					Placeholder: pageCtx.T("Roles.Single._Description.Placeholder"),
					Attrs: templ.Attributes{
						"name": "Description",
						"form": "save-form",
						"rows": "4",
					},
					Value: props.Role.Description,
					Error: props.Errors["Description"],
				})
			}
			if len(props.ModulePermissionGroups) > 0 {
				{{
					// Get first module as default
					defaultModule := props.ModulePermissionGroups[0].Module
				}}
				@tab.Root(tab.Props{
					DefaultValue: defaultModule,
					Class:        "space-y-4",
				}) {
					@tab.List(tab.ListProps{
						Class: "px-0",
					}) {
						for _, moduleGroup := range props.ModulePermissionGroups {
							@tab.Button(moduleGroup.Module) {
								{ pageCtx.T(fmt.Sprintf("Modules.%s", moduleGroup.Module)) }
							}
						}
					}
					for _, moduleGroup := range props.ModulePermissionGroups {
						@tab.Content(moduleGroup.Module) {
							<div class="space-y-3 pt-4">
								for _, resourceGroup := range moduleGroup.ResourceGroups {
									@card.Card(card.Props{
										Class: "space-y-3",
									}) {
										<div class="space-y-3">
											<h3 class="text-lg font-medium text-gray-900">
												{ pageCtx.T(fmt.Sprintf("Resources.%s", resourceGroup.Resource)) }
											</h3>
											for setIndex, permissionSet := range resourceGroup.PermissionSets {
												@PermissionSet(PermissionSetProps{
													PageContext:  pageCtx,
													Set:          permissionSet,
													ResourceName: resourceGroup.Resource,
													SetIndex:     setIndex,
												})
											}
										</div>
									}
								}
							</div>
						}
					}
				}
			}
		</div>
		<div
			x-data
			class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4"
		>
			<form
				id="delete-form"
				hx-delete={ fmt.Sprintf("/roles/%s", props.Role.ID) }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-role-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Disabled: !props.Role.CanDelete,
					Size:     button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-role-confirmation')",
						"id":     "delete-role-btn",
					},
				}) {
					{ pageCtx.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ fmt.Sprintf("/roles/%s", props.Role.ID) }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Disabled: !props.Role.CanUpdate,
					Size:     button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditFormProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Roles.Meta.Edit.Title")},
	}) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			Heading: pageCtx.T("Roles.Single.Delete"),
			Text:    pageCtx.T("Roles.Single.DeleteConfirmation"),
			Icon:    icons.Trash(icons.Props{Size: "20"}),
			Action:  "open-delete-role-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}
