package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"

	"github.com/iota-uz/iota-sdk/modules/core/domain/aggregates/user"
	model "github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/gqlmodels"
	"github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/mappers"
	"github.com/iota-uz/iota-sdk/pkg/mapping"
)

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*model.User, error) {
	domainUser, err := r.userService.GetByID(ctx, uint(id))
	if err != nil {
		return nil, err
	}
	return mappers.UserToGraphModel(domainUser), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, offset int, limit int, sortBy []int, ascending bool) (*model.PaginatedUsers, error) {
	domainUsers, err := r.userService.GetPaginated(ctx, &user.FindParams{
		Limit:  limit,
		Offset: offset,
		SortBy: user.SortBy{
			Fields:    sortBy,
			Ascending: ascending,
		},
	})
	if err != nil {
		return nil, err
	}
	total, err := r.userService.Count(ctx)
	if err != nil {
		return nil, err
	}
	return &model.PaginatedUsers{
		Data:  mapping.MapViewModels(domainUsers, mappers.UserToGraphModel),
		Total: total,
	}, nil
}
