package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"errors"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
	"github.com/gabriel-vasile/mimetype"
	"github.com/iota-uz/iota-sdk/modules/core/domain/entities/upload"
	model "github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/gqlmodels"
	"github.com/iota-uz/iota-sdk/modules/core/interfaces/graph/mappers"
	"github.com/iota-uz/iota-sdk/pkg/mapping"
)

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file *graphql.Upload) (*model.Upload, error) {
	dto := &upload.CreateDTO{
		File: file.File,
		Name: file.Filename,
		Size: int(file.Size),
	}
	if _, ok := dto.Ok(ctx); !ok {
		return nil, errors.New("invalid file")
	}

	uploadEntity, err := r.uploadService.Create(ctx, dto)
	if err != nil {
		return nil, fmt.Errorf("failed to create upload: %w", err)
	}

	return mappers.UploadToGraphModel(uploadEntity), nil
}

// Uploads is the resolver for the uploads field.
func (r *queryResolver) Uploads(ctx context.Context, filter model.UploadFilter) ([]*model.Upload, error) {
	params := &upload.FindParams{}
	if filter.Type != nil {
		params.Type = *filter.Type
	}
	if filter.MimeType != nil {
		params.Mimetype = mimetype.Lookup(*filter.MimeType)
	}
	uploads, err := r.uploadService.GetPaginated(ctx, params)
	if err != nil {
		return nil, fmt.Errorf("failed to find uploads: %w", err)
	}

	return mapping.MapViewModels(uploads, mappers.UploadToGraphModel), nil
}
