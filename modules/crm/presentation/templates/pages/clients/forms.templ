package clients

import (
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/base/tab"
	"github.com/iota-uz/iota-sdk/components/selects"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

// Create Form

type CreatePageProps struct {
	Client  *viewmodels.Client
	Errors  map[string]string
	SaveURL string
}

templ CreateForm(props *CreatePageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form
		class="flex flex-col justify-between h-full"
		hx-post={ props.SaveURL }
		hx-swap="outerHTML"
		hx-indicator="#save-btn"
	>
		<div class="m-6">
			@tab.Root(tab.Props{
				DefaultValue: "personal",
			}) {
				@tab.List(tab.ListProps{}) {
					@tab.Button("personal") {
						{ pageCtx.T("Clients.Tabs.Personal") }
					}
					@tab.Button("documents") {
						{ pageCtx.T("Clients.Tabs.Documents") }
					}
				}
				@tab.Content("personal") {
					<!-- Personal Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-3 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.PersonalInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.FirstName.Label"),
							Placeholder: pageCtx.T("Clients.Single.FirstName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.FirstName,
								"name":  "FirstName",
							},
							Error: props.Errors["FirstName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.LastName.Label"),
							Placeholder: pageCtx.T("Clients.Single.LastName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.LastName,
								"name":  "LastName",
							},
							Error: props.Errors["LastName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.MiddleName.Label"),
							Placeholder: pageCtx.T("Clients.Single.MiddleName.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.MiddleName,
								"name":  "MiddleName",
							},
							Error: props.Errors["MiddleName"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Phone.Label"),
							Placeholder: pageCtx.T("Clients.Single.Phone.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Phone,
								"name":  "Phone",
							},
							Error: props.Errors["Phone"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Email.Label"),
							Placeholder: pageCtx.T("Clients.Single.Email.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Email,
								"name":  "Email",
								"type":  "email",
							},
							Error: props.Errors["Email"],
						})
						@input.Date(&input.Props{
							Label:       pageCtx.T("Clients.Single.DateOfBirth.Label"),
							Placeholder: pageCtx.T("Clients.Single.DateOfBirth.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.DateOfBirth,
								"name":  "DateOfBirth",
							},
							Error: props.Errors["DateOfBirth"],
						})
						@input.TextArea(&input.TextAreaProps{
							Label:        pageCtx.T("Clients.Single.Address.Label"),
							Placeholder:  pageCtx.T("Clients.Single.Address.Placeholder"),
							Value:        props.Client.Address,
							WrapperClass: "col-span-3",
							Attrs: templ.Attributes{
								"name": "Address",
								"rows": "3",
							},
							Error: props.Errors["Address"],
						})
					}
				}
				@tab.Content("documents") {
					<!-- Passport Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-2 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.PassportInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.PassportSeries.Label"),
							Placeholder: pageCtx.T("Clients.Single.PassportSeries.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Passport.Series,
								"name":  "PassportSeries",
							},
							Error: props.Errors["PassportSeries"],
						})
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.PassportNumber.Label"),
							Placeholder: pageCtx.T("Clients.Single.PassportNumber.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Passport.Number,
								"name":  "PassportNumber",
							},
							Error: props.Errors["PassportNumber"],
						})
					}
					<!-- Tax Information Card -->
					@card.Card(card.Props{
						Class:        "grid grid-cols-2 gap-4",
						Header:       card.DefaultHeader(pageCtx.T("Clients.Single.TaxInfo")),
						WrapperClass: "mt-5",
					}) {
						@input.Text(&input.Props{
							Label:       pageCtx.T("Clients.Single.Pin.Label"),
							Placeholder: pageCtx.T("Clients.Single.Pin.Placeholder"),
							Attrs: templ.Attributes{
								"value": props.Client.Pin,
								"name":  "Pin",
							},
							Error: props.Errors["Pin"],
						})
						@selects.CountriesSelect(selects.CountriesSelectProps{
							Label:       pageCtx.T("Clients.Single.CountryCode.Label"),
							Placeholder: pageCtx.T("Clients.Single.CountryCode.Placeholder"),
							Name:        "CountryCode",
							Selected:    props.Client.CountryCode,
							Error:       props.Errors["CountryCode"],
						})
					}
				}
			}
		</div>
		<div class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
			@button.Primary(button.Props{
				Size: button.SizeMD,
				Attrs: templ.Attributes{
					"id": "save-btn",
				},
			}) {
				{ pageCtx.T("Save") }
			}
		</div>
	</form>
}

// PersonalInfoEditForm is a dedicated form for editing personal information
type PersonalInfoEditProps struct {
	Client *viewmodels.Client
	Errors map[string]string
	Form   string
}

templ PersonalInfoEditForm(props *PersonalInfoEditProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div>
		<input type="hidden" name="section" value="personal"/>
		<div class="p-4 grid grid-cols-2 gap-4">
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.FirstName.Label"),
				Placeholder: pageCtx.T("Clients.Single.FirstName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.FirstName,
					"name":  "FirstName",
					"form":  props.Form,
				},
				Error: props.Errors["FirstName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.LastName.Label"),
				Placeholder: pageCtx.T("Clients.Single.LastName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.LastName,
					"name":  "LastName",
					"form":  props.Form,
				},
				Error: props.Errors["LastName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.MiddleName.Label"),
				Placeholder: pageCtx.T("Clients.Single.MiddleName.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.MiddleName,
					"name":  "MiddleName",
					"form":  props.Form,
				},
				Error: props.Errors["MiddleName"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.Phone.Label"),
				Placeholder: pageCtx.T("Clients.Single.Phone.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Phone,
					"name":  "Phone",
					"form":  props.Form,
				},
				Error: props.Errors["Phone"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.Email.Label"),
				Placeholder: pageCtx.T("Clients.Single.Email.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Email,
					"name":  "Email",
					"type":  "email",
					"form":  props.Form,
				},
				Error: props.Errors["Email"],
			})
			@input.Date(&input.Props{
				Label:       pageCtx.T("Clients.Single.DateOfBirth.Label"),
				Placeholder: pageCtx.T("Clients.Single.DateOfBirth.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.DateOfBirth,
					"name":  "DateOfBirth",
					"form":  props.Form,
				},
				Error: props.Errors["DateOfBirth"],
			})
			@input.TextArea(&input.TextAreaProps{
				Label:        pageCtx.T("Clients.Single.Address.Label"),
				Placeholder:  pageCtx.T("Clients.Single.Address.Placeholder"),
				Value:        props.Client.Address,
				WrapperClass: "col-span-2",
				Attrs: templ.Attributes{
					"name": "Address",
					"rows": "3",
					"form": props.Form,
				},
				Error: props.Errors["Address"],
			})
		</div>
	</div>
}

// PassportInfoEditForm is a dedicated form for editing passport information
type PassportInfoEditProps struct {
	Client *viewmodels.Client
	Errors map[string]string
	Form   string
}

templ PassportInfoEditForm(props *PassportInfoEditProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div>
		<input type="hidden" name="section" value="passport"/>
		<div class="p-4 grid grid-cols-2 gap-4">
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.PassportSeries.Label"),
				Placeholder: pageCtx.T("Clients.Single.PassportSeries.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Passport.Series,
					"name":  "PassportSeries",
					"form":  props.Form,
				},
				Error: props.Errors["PassportSeries"],
			})
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.PassportNumber.Label"),
				Placeholder: pageCtx.T("Clients.Single.PassportNumber.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Passport.Number,
					"name":  "PassportNumber",
					"form":  props.Form,
				},
				Error: props.Errors["PassportNumber"],
			})
		</div>
	</div>
}

// TaxInfoEditForm is a dedicated form for editing tax information
type TaxInfoEditProps struct {
	Client *viewmodels.Client
	Errors map[string]string
	Form   string
}

templ TaxInfoEditForm(props *TaxInfoEditProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div>
		<input type="hidden" name="section" value="tax"/>
		<div class="p-4 grid grid-cols-2 gap-4">
			@input.Text(&input.Props{
				Label:       pageCtx.T("Clients.Single.Pin.Label"),
				Placeholder: pageCtx.T("Clients.Single.Pin.Placeholder"),
				Attrs: templ.Attributes{
					"value": props.Client.Pin,
					"name":  "Pin",
					"form":  props.Form,
				},
				Error: props.Errors["Pin"],
			})
			@selects.CountriesSelect(selects.CountriesSelectProps{
				Label:       pageCtx.T("Clients.Single.CountryCode.Label"),
				Placeholder: pageCtx.T("Clients.Single.CountryCode.Placeholder"),
				Name:        "CountryCode",
				Attrs: templ.Attributes{
					"form": props.Form,
				},
				Selected: props.Client.CountryCode,
				Error:    props.Errors["CountryCode"],
			})
		</div>
	</div>
}