package clients

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"net/url"
	"strconv"
)

type IndexPageProps struct {
	Clients []*viewmodels.Client
	Page    int
	PerPage int
	HasMore bool
	NewURL  string
}

func mkInfiniteAttrs(props *IndexPageProps) templ.Attributes {
	params := url.Values{}
	params.Set("page", strconv.Itoa(props.Page+1))
	params.Set("limit", strconv.Itoa(props.PerPage))

	return templ.Attributes{
		"hx-get":     "/crm/clients?" + params.Encode(),
		"hx-trigger": "intersect once",
		"hx-swap":    "afterend",
		"hx-target":  "this",
	}
}

templ ClientRow(client *viewmodels.Client, rowProps *base.TableRowProps) {
	{{
		url := fmt.Sprintf("/crm/clients?tab=profile&view=%s", client.ID)
	}}
	@base.TableRow(*rowProps) {
		@base.TableCell(base.TableCellProps{}) {
			<button
				type="button"
				x-data
				hx-get={ url }
				hx-target="body"
				hx-swap="beforeend"
				hx-trigger="click"
				hx-push-url="true"
				class="cursor-pointer"
			>
				<div class="flex items-center gap-3">
					<div
						class={
							"w-8 h-8 rounded-full flex items-center justify-center",
							"bg-brand-500/10 text-brand-500 font-medium text-sm",
						}
					>
						{ client.Initials() }
					</div>
					<span>
						{ client.FullName() }
					</span>
				</div>
			</button>
		}
		@base.TableCell(base.TableCellProps{}) {
			{ client.Phone }
		}
		@base.TableCell(base.TableCellProps{}) {
			<div x-data="relativeformat">
				<span x-text={ fmt.Sprintf("format('%s')", client.CreatedAt) }></span>
			</div>
		}
	}
}

templ ClientCreatedEvent(client *viewmodels.Client, rowProps *base.TableRowProps) {
	<tbody hx-swap-oob="afterbegin:#clients-table-body">
		@ClientRow(client, rowProps)
	</tbody>
}

templ ClientRows(props *IndexPageProps) {
	<tr class="hidden">
		<td colspan="3">
			@loaders.Spinner(loaders.SpinnerProps{
				ContainerClass: templ.Classes(
					"flex justify-center items-center py-4",
				),
			})
		</td>
	</tr>
	for ix, client := range props.Clients {
		{{
			isLastRow := ix == len(props.Clients)-1
			rowProps := &base.TableRowProps{
				Attrs: templ.Attributes{},
			}
			if isLastRow && props.HasMore {
				rowProps.Attrs = mkInfiniteAttrs(props)
			}
		}}
		@ClientRow(client, rowProps)
	}
}

templ ClientsTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Table(base.TableProps{
		Columns: []*base.TableColumn{
			{Label: pageCtx.T("Clients.List.FullName"), Key: "fullName"},
			{Label: pageCtx.T("Clients.List.Phone"), Key: "phone"},
			{Label: pageCtx.T("CreatedAt"), Key: "createdAt"},
		},
		TBodyAttrs: templ.Attributes{
			"id": "clients-table-body",
		},
	}) {
		if len(props.Clients) == 0 {
			<tr>
				<td colspan="3">
					@base.TableEmptyState(base.TableEmptyStateProps{
						Title:       pageCtx.T("Clients.List.NoData.Title"),
						Description: pageCtx.T("Clients.List.NoData._Description"),
					})
				</td>
			</tr>
		} else {
			@ClientRows(props)
		}
	}
}

templ ClientsContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="bg-surface-600 border border-primary rounded-lg">
		<form
			class="p-4 flex items-center gap-3"
			hx-get="/crm/clients"
			hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
			hx-target="#clients-table-body"
			hx-swap="innerHTML"
			hx-indicator="#clients-table-body"
		>
			<input type="hidden" name="page" value="1"/>
			@filters.Search([]filters.SearchField{
				{
					Label: pageCtx.T("Clients.List.FullName"),
					Key:   "full_name",
				},
			})
			@filters.PageSize()
			@filters.CreatedAt()
			@button.Primary(button.Props{
				Size: button.SizeNormal,
				Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				Attrs: templ.Attributes{
					"type":   "button",
					"x-data": "",
					"@click": "$dispatch('new-client')",
				},
			}) {
				{ pageCtx.T("Clients.List.New") }
			}
		</form>
		@ClientsTable(props)
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Clients.List.Meta.Title")},
	}) {
		@NewClientDrawer()
		<div class="m-6">
			<h1 class="text-2xl font-medium">
				{ pageCtx.T("NavigationLinks.Clients") }
			</h1>
			<div class="mt-5" id="clients-table-wrapper">
				@ClientsContent(props)
			</div>
		</div>
		<template
			x-data="{ showDialog: new URLSearchParams(window.location.search).has('view') }"
			x-if="showDialog"
		>
			<div
				hx-get={ pageCtx.URL.RawPath }
				hx-trigger="load"
				hx-target="body"
				hx-swap="beforeend"
			></div>
		</template>
	}
}
