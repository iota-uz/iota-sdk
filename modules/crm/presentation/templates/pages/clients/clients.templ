package clients

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Clients         []*viewmodels.Client
	PaginationState *pagination.State
	NewURL          string
}

templ ClientRow(client *viewmodels.Client, rowProps *base.TableRowProps) {
	{{
		url := fmt.Sprintf("/crm/clients?tab=profile&view=%s", client.ID)
	}}
	@base.TableRow(*rowProps) {
		@base.TableCell(base.TableCellProps{}) {
			<button
				type="button"
				x-data
				hx-get={ url }
				hx-target="body"
				hx-swap="beforeend"
				hx-trigger="click"
				hx-push-url="true"
				class="cursor-pointer"
			>
				<div class="flex items-center gap-3">
					<div
						class={
							"w-8 h-8 rounded-full flex items-center justify-center",
							"bg-brand-500/10 text-brand-500 font-medium text-sm",
						}
					>
						{ client.Initials() }
					</div>
					<span>
						{ client.FullName() }
					</span>
				</div>
			</button>
		}
		@base.TableCell(base.TableCellProps{}) {
			{ client.Phone }
		}
		@base.TableCell(base.TableCellProps{}) {
			<div x-data="relativeformat">
				<span x-text={ fmt.Sprintf("format('%s')", client.UpdatedAt) }></span>
			</div>
		}
	}
}

templ ClientCreatedEvent(client *viewmodels.Client, rowProps *base.TableRowProps) {
	<tbody hx-swap-oob="afterbegin:#clients-table-body">
		@ClientRow(client, rowProps)
	</tbody>
}

templ ClientRows(clients []*viewmodels.Client) {
	for _, client := range clients {
		@ClientRow(client, &base.TableRowProps{})
	}
}

templ ClientsTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@NewClientDrawer()
	<div class="flex flex-col gap-4 table-wrapper">
		@base.Table(base.TableProps{
			Columns: []*base.TableColumn{
				{Label: pageCtx.T("Clients.List.FullName"), Key: "fullName"},
				{Label: pageCtx.T("Clients.List.Phone"), Key: "phone"},
				{Label: pageCtx.T("UpdatedAt"), Key: "updatedAt"},
			},
		}) {
			<tbody id="clients-table-body">
				@ClientRows(props.Clients)
			</tbody>
		}
		if len(props.PaginationState.Pages()) > 1 {
			@pagination.Pagination(props.PaginationState)
		}
	</div>
}

templ ClientsContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.T("NavigationLinks.Clients") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/crm/clients"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@filters.Search([]filters.SearchField{
					{
						Label: pageCtx.T("Clients.List.FullName"),
						Key:   "full_name",
					},
				})
				@filters.PageSize()
				@filters.CreatedAt()
				@button.Primary(button.Props{
					Size: button.SizeNormal,
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
					Attrs: templ.Attributes{
						"type":   "button",
						"x-data": "",
						"@click": "$dispatch('new-client')",
					},
				}) {
					{ pageCtx.T("Clients.List.New") }
				}
			</form>
			@ClientsTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Clients.List.Meta.Title")},
	}) {
		@ClientsContent(props)
		<template
			x-data="{ showDialog: new URLSearchParams(window.location.search).has('view') }"
			x-if="showDialog"
		>
			<div
				hx-get={ pageCtx.URL.RawPath }
				hx-trigger="load"
				hx-target="body"
				hx-swap="beforeend"
			></div>
		</template>
	}
}
