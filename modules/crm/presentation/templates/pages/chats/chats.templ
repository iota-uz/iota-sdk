package chatsui

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/avatar"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/crm/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type NewChatProps struct {
	BaseURL       string
	CreateChatURL string
	Phone         string
	Errors        map[string]string
}

templ NewChat(props NewChatProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="space-y-5 p-5">
		<div>
			<h1 class="text-2xl font-medium">
				{ pageCtx.T("Chats.New.Title") }
			</h1>
		</div>
		@card.Card(card.Props{}) {
			@NewChatForm(props)
		}
	</div>
}

templ NewChatForm(props NewChatProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<form
		hx-post={ props.CreateChatURL }
		hx-trigger="submit"
		hx-swap="outerHTML"
	>
		@input.Text(&input.Props{
			Label:       "Phone",
			Placeholder: "Enter phone",
			Attrs: templ.Attributes{
				"name":  "Phone",
				"value": props.Phone,
			},
			Error: props.Errors["Phone"],
		})
		<div class="flex gap-4 justify-end mt-4">
			@button.Secondary(button.Props{
				Href: props.BaseURL,
			}) {
				{ pageCtx.T("Chats.New.Cancel") }
			}
			@button.Primary(button.Props{}) {
				{ pageCtx.T("Chats.New.Add") }
			}
		</div>
	</form>
}

templ NoSelectedChat() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex items-center justify-center flex-1">
		<p class="text-base-600">
			{ pageCtx.T("Chats.NoSelectedChat") }
		</p>
	</div>
}

// ---- Selected Chat ----

type SelectedChatProps struct {
	BaseURL    string
	ClientsURL string
	Chat       *viewmodels.Chat
	Templates  []*viewmodels.MessageTemplate
}

templ SelectedChat(props SelectedChatProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		client := props.Chat.Client
		clientPageURL := fmt.Sprintf("%s?tab=profile&view=%s&dp=true", props.ClientsURL, client.ID)
	}}
	<script>
		function onUseTemplate(template) {
			const textarea = document.getElementById("message");
			textarea.value = template;
			textarea.focus();
			textarea.style.height = 'auto';
			textarea.style.height = textarea.scrollHeight + 'px';
		}
	</script>
	@InstantMessagesDialog(InstantMessagesDialogProps{
		OnClick:   "onUseTemplate",
		Templates: props.Templates,
	})
	<div class="border-b">
		<div
			class={
				"w-full p-2 md:p-5",
				"flex items-center justify-between md:justify-start gap-4",
			}
		>
			@button.Ghost(button.Props{
				Href:  props.BaseURL,
				Class: "flex md:hidden items-center gap-2 order-1",
			}) {
				@icons.CaretLeft(icons.Props{
					Size: "20",
				})
				{ pageCtx.T("Chats.Back") }
			}
			<button
				x-data
				hx-get={ clientPageURL }
				hx-target="body"
				hx-swap="beforeend"
				hx-trigger="click"
				class="p-2 order-3 md:order-1"
			>
				@avatar.Avatar(avatar.Props{
					Initials: props.Chat.Client.Initials(),
					Class:    templ.Classes("w-10 h-10 min-w-10"),
				})
			</button>
			<button
				class="cursor-pointer text-center md:text-left order-2 md:order-2"
				x-data
				hx-get={ clientPageURL }
				hx-target="body"
				hx-swap="beforeend"
				hx-trigger="click"
			>
				<p class="font-bold transition-all leading-[1.25] text-base-800">
					{ client.FullName() }
				</p>
				<p class="transition-all font-medium text-base-600">
					+{ client.Phone }
				</p>
			</button>
		</div>
	</div>
	<div class="flex flex-col flex-1 px-4 min-h-0">
		@ChatMessages(props.Chat)
		@ChatInput(ChatInputProps{
			SendURL: fmt.Sprintf("%s/%s/messages", props.BaseURL, props.Chat.ID),
		})
	</div>
}

// ---- Chat Input ----

type ChatInputProps struct {
	SendURL string
}

templ ChatInput(props ChatInputProps) {
	<div class="border border-primary rounded-md p-4 mb-4">
		<div x-data="{text: ''}">
			<textarea
				id="message"
				x-model="text"
				@input="$el.style.height = 'auto'; $el.style.height = $el.scrollHeight + 'px'"
				class="text-sm resize-none w-full focus:outline-none"
				placeholder="Type a message..."
				name="Message"
				form="send-message-form"
			></textarea>
		</div>
		<div class="flex justify-between">
			<div class="flex gap-2">
				<button class="cursor-pointer">
					<label class="cursor-pointer">
						@icons.Paperclip(icons.Props{
							Size: "20",
						})
						<input
							form="send-message-form"
							accept="image/*"
							class="sr-only"
							name="Attachment"
							type="file"
						/>
					</label>
				</button>
				<button
					x-data
					class="cursor-pointer"
					@click="$dispatch('instant-messages-dialog')"
				>
					@icons.Lightning(icons.Props{Size: "20"})
				</button>
			</div>
			<form
				id="send-message-form"
				hx-post={ props.SendURL }
				hx-trigger="submit"
				hx-swap="innerHTML"
				hx-target="#chat-contents"
			>
				<button
					class="cursor-pointer"
				>
					@icons.TelegramLogo(icons.Props{Size: "20"})
				</button>
			</form>
		</div>
	</div>
}

templ ChatMessages(chat *viewmodels.Chat) {
	<ul
		id={ fmt.Sprintf("chat-messages-%s", chat.Client.ID) }
		class="flex flex-col-reverse gap-4 px-3 py-4 overflow-y-auto no-scrollbar flex-1"
	>
		for _, msg := range chat.ReversedMessages() {
			@Message(msg)
		}
	</ul>
}

templ ChatNotFound() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex items-center justify-center flex-1">
		<p class="text-base-600">
			{ pageCtx.T("Chats.ChatNotFound") }
		</p>
	</div>
}

templ ChatCard(chat *viewmodels.Chat) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		active := pageCtx.URL.Query().Get("chat_id") == chat.ID
	}}
	<button
		class={
			"flex items-center justify-start gap-2",
			"cursor-pointer rounded-lg py-2 px-3 text-left w-full",
			templ.KV("text-white bg-brand-500", active),
		}
		hx-get={ fmt.Sprintf("/crm/chats?chat_id=%s", chat.ID) }
		hx-trigger="click"
		hx-target="#chat"
		hx-push-url="true"
	>
		<div>
			@avatar.Avatar(avatar.Props{
				Initials: chat.Client.Initials(),
				Class: templ.Classes(
					"w-10 h-10 min-w-10",
					templ.KV("bg-white text-black", active),
				),
			})
		</div>
		<div class="min-w-0">
			<p class="font-bold transition-all leading-[1.25] text-base-800">
				{ chat.Client.FullName() }
			</p>
			if chat.LastMessage() != nil {
				<p class="font-medium text-base-600 truncate">
					{ chat.LastMessage().Message }
				</p>
			}
		</div>
		if !active && chat.HasUnreadMessages() {
			<div class="flex justify-end flex-grow">
				<div class="w-5 h-5 text-center bg-brand-500 rounded-full text-white text-sm">
					{ chat.UnreadMessagesFormatted() }
				</div>
			</div>
		}
	</button>
}

templ Message(msg *viewmodels.Message) {
	<li>
		if msg.Sender.IsUser() {
			<div class="flex justify-end">
				<div class="flex items-end justify-end gap-[6px] max-w-[526px]">
					<div
						class="bg-brand-500 rounded-[12px] rounded-br-[0px] py-2 px-3 flex-grow-0 flex-shrink-1"
					>
						<p class="whitespace-pre-line text-white">
							{ msg.Message }
						</p>
						<time
							class="flex ml-auto items-end gap-2 text-white text-opacity-80 text-[13px] text-right"
							datetime="2025-01-27T15:28:31.441Z"
						>
							{ msg.Date() } | { msg.Time() }
							@icons.Check(icons.Props{Size: "16"})
						</time>
					</div>
					@avatar.Avatar(avatar.Props{
						Initials: msg.Sender.Initials(),
						Class:    templ.Classes("min-w-10 w-10 h-10 hidden md:flex"),
					})
				</div>
			</div>
		} else {
			<div class="flex items-end gap-2.5 max-w-[526px]">
				@avatar.Avatar(avatar.Props{
					Initials: msg.Sender.Initials(),
					Class:    templ.Classes("w-10 h-10 min-w-10 hidden md:flex"),
				})
				<div class="bg-gray-200/90 rounded-[12px] rounded-bl-[0] py-2 px-3">
					<p class="whitespace-pre-line">
						{ msg.Message }
					</p>
					<time
						class="flex gap-2 items-center text-text-muted text-[13px] text-left"
						datetime="2025-01-29T18:10:45.930Z"
					>
						{ msg.Date() } | { msg.Time() }
						@icons.Check(icons.Props{Size: "16"})
					</time>
				</div>
			</div>
		}
	</li>
}

type IndexPageProps struct {
	SearchURL  string
	NewChatURL string
	Chats      []*viewmodels.Chat
}

templ Index(props IndexPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
	}}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Chats.Meta.Title")},
	}) {
		<div class="md:p-6 h-[calc(100vh-4rem)]">
			<div
				id="chat"
				class={
					"grid grid-cols-1 md:grid-cols-[280px_auto] h-full",
					"border border-primary md:rounded-lg bg-surface-300",
				}
			>
				@ChatLayout(props) {
					{ children... }
				}
			</div>
		</div>
	}
}

templ ChatLayout(props IndexPageProps) {
	{{
		pageCtx := composables.UsePageCtx(ctx)
		isSelectedChat := pageCtx.URL.Query().Get("chat_id") != ""
	}}
	<div
		class={
			"flex flex-col overflow-hidden",
			templ.KV("hidden md:flex", isSelectedChat),
		}
	>
		<div
			class="shrink-0 pt-5 px-4 flex flex-wrap gap-2 items-center justify-between border-r"
		>
			@button.Secondary(button.Props{
				Href: "/crm/instant-messages",
			}) {
				{ pageCtx.T("Chats.InstantMessages") }
			}
			@button.Primary(button.Props{
				Href: props.NewChatURL,
			}) {
				{ pageCtx.T("Chats.New.Title") }
			}
		</div>
		<div class="grow overflow-hidden flex flex-col pt-6 px-4 border-r">
			<div class="pb-5">
				<div class="w-full relative">
					<form
						class="flex items-center gap-3"
						hx-get={ props.SearchURL }
						hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
						hx-target="#chats-list"
						hx-swap="outerHTML"
					>
						@filters.Search([]filters.SearchField{
							{
								Label: "",
								Key:   "search",
							},
						})
					</form>
				</div>
			</div>
			<div class="grow flex flex-col gap-2 overflow-auto">
				@ChatList(props.Chats)
			</div>
		</div>
	</div>
	<div
		id="chat-contents"
		class={
			"flex flex-col min-h-0",
			templ.KV("hidden md:flex", !isSelectedChat),
		}
	>
		{ children... }
	</div>
}

templ ChatList(chats []*viewmodels.Chat) {
	<ul
		role="list"
		id="chats-list"
	>
		for _, chat := range chats {
			<li
				role="listitem"
				class="cursor-pointer"
			>
				@ChatCard(chat)
			</li>
		}
	</ul>
}
