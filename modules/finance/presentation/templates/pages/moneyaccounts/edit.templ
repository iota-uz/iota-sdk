package moneyaccounts

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/components"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	coreviewmodels "github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type EditPageProps struct {
	Account    *viewmodels.MoneyAccountUpdateDTO
	Currencies []*coreviewmodels.Currency
	Errors     map[string]string
	PostPath   string
	DeletePath string
}

templ EditForm(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col justify-between h-full" id="edit-content">
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@input.Text(&input.Props{
				Label: pageCtx.T("Accounts.Single.Name"),
				Attrs: templ.Attributes{
					"value": props.Account.Name,
					"name":  "Name",
					"form":  "save-form",
				},
				Error: props.Errors["Name"],
			})
			@input.Number(&input.Props{
				Label: pageCtx.T("Accounts.Single.Balance"),
				Attrs: templ.Attributes{
					"name":  "Balance",
					"value": props.Account.Balance,
					"form":  "save-form",
				},
				Error: props.Errors["Balance"],
			})
			@components.CurrencySelect(&components.CurrencySelectProps{
				Label:       pageCtx.T("Accounts.Single.Currency.Label"),
				Placeholder: pageCtx.T("Accounts.Single.Currency.Placeholder"),
				Value:       props.Account.CurrencyCode,
				Currencies:  props.Currencies,
				Error:       props.Errors["CurrencyCode"],
				Attrs: templ.Attributes{
					"name": "CurrencyCode",
					"form": "save-form",
				},
			})
			@input.Text(&input.Props{
				Label: pageCtx.T("Accounts.Single.AccountNumber"),
				Attrs: templ.Attributes{
					"value": props.Account.AccountNumber,
					"name":  "AccountNumber",
					"form":  "save-form",
				},
				Error: props.Errors["AccountNumber"],
			})
			@input.TextArea(&input.TextAreaProps{
				Label: pageCtx.T("Accounts.Single.Description"),
				Attrs: templ.Attributes{
					"name": "Description",
					"form": "save-form",
				},
				Value:        props.Account.Description,
				WrapperClass: "col-span-3",
				Error:        props.Errors["Description"],
			})
		}
		<div
			x-data
			class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4"
		>
			<form
				id="delete-form"
				hx-delete={ props.DeletePath }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-account-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-account-confirmation')",
						"id":     "delete-account-btn",
					},
				}) {
					{ pageCtx.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ props.PostPath }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Accounts.Meta.Edit.Title")},
	}) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			CancelText:  pageCtx.T("Cancel"),
			ConfirmText: pageCtx.T("Delete"),
			Heading:     pageCtx.T("Accounts.Single.Delete"),
			Text:        pageCtx.T("Accounts.Single.DeleteConfirmation"),
			Icon:        icons.Trash(icons.Props{Size: "20"}),
			Action:      "open-delete-account-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
					if (target.returnValue === "confirm") {
						let deleteForm = document.getElementById("delete-form");
						htmx.trigger(deleteForm, "submit");
					}
				}`,
			},
		})
	}
}
