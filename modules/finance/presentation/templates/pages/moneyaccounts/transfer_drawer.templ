package moneyaccounts

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/controllers/dtos"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type TransferDrawerProps struct {
	SourceAccount       *viewmodels.MoneyAccount
	DestinationAccounts []*viewmodels.MoneyAccount
	TransferData        dtos.TransferDTO
	Errors              map[string]string
}

templ TransferDrawer(props *TransferDrawerProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div id={ fmt.Sprintf("transfer-drawer-%s", props.SourceAccount.ID) }>
		@dialog.StdViewDrawer(dialog.StdDrawerProps{
			ID:     fmt.Sprintf("transfer-drawer-%s-dialog", props.SourceAccount.ID),
			Title:  pageCtx.T("Transfers.Meta.New.Title"),
			Action: "open-view-drawer",
			Open:   true,
			Attrs: templ.Attributes{
				"@closing": "window.history.pushState({}, '', '/finance/accounts')",
				"@closed":  fmt.Sprintf("document.getElementById('transfer-drawer-%s').remove()", props.SourceAccount.ID),
			},
		}) {
			<form
				id={ fmt.Sprintf("transfer-form-%s", props.SourceAccount.ID) }
				method="post"
				hx-post={ fmt.Sprintf("/finance/accounts/%s/transfer", props.SourceAccount.ID) }
				hx-target={ fmt.Sprintf("#transfer-drawer-%s", props.SourceAccount.ID) }
				hx-swap="outerHTML"
				class="flex flex-col h-full"
			>
				<div class="flex-1 p-6 space-y-6">
					<!-- Source Account Display -->
					<div class="bg-blue-50 rounded-lg p-4 border border-blue-200">
						<div class="flex items-center gap-3">
							<div class="p-2 bg-blue-100 rounded-lg">
								@icons.Wallet(icons.Props{Size: "24", Variant: icons.DuoTone, Class: "text-blue-600"})
							</div>
							<div class="flex-1">
								<h3 class="text-sm font-medium text-gray-900 mb-1">{ pageCtx.T("Transfers.Single.From") }</h3>
								<p class="font-medium text-gray-900">{ props.SourceAccount.Name }</p>
								<p class="text-sm text-gray-700">{ props.SourceAccount.BalanceWithCurrency }</p>
							</div>
						</div>
					</div>
					<!-- Transfer Arrow -->
					<div class="flex justify-center">
						<div class="p-2 bg-gray-100 rounded-full">
							@icons.ArrowDown(icons.Props{Size: "24", Variant: icons.Bold, Class: "text-gray-600"})
						</div>
					</div>
					<!-- Destination Account Selection -->
					<div class="space-y-4">
						<div>
							<label class="block text-sm font-medium text-gray-700 mb-1">
								{ pageCtx.T("Transfers.Single.DestinationAccountID") }
							</label>
							<select
								name="DestinationAccountID"
								required
								id="destination-account-select"
								data-source-currency={ props.SourceAccount.CurrencyCode }
								class="w-full rounded-md border-gray-300 shadow-sm focus:border-blue-500 focus:ring-blue-500"
								onchange="checkCurrencyMismatch()"
							>
								<option value="">{ pageCtx.T("Transfers.Single.SelectDestinationAccount") }</option>
								for _, account := range props.DestinationAccounts {
									<option
										value={ account.ID }
										data-currency={ account.CurrencyCode }
										selected?={ account.ID == props.TransferData.DestinationAccountID }
									>
										{ account.Name } ({ account.BalanceWithCurrency })
									</option>
								}
							</select>
							if props.Errors["DestinationAccountID"] != "" {
								<p class="mt-1 text-sm text-red-600">{ props.Errors["DestinationAccountID"] }</p>
							}
						</div>
						<!-- Amount -->
						@input.Number(&input.Props{
							Label: pageCtx.T("Transfers.Single.Amount"),
							Attrs: templ.Attributes{
								"name":        "Amount",
								"value":       fmt.Sprintf("%.2f", props.TransferData.Amount),
								"step":        "0.01",
								"min":         "0.01",
								"required":    "true",
								"placeholder": "0.00",
							},
							Error: props.Errors["Amount"],
						})
						<!-- Exchange Rate Fields (shown only for cross-currency transfers) -->
						<div id="exchange-fields" class="space-y-4" style="display: none;">
							<div class="bg-yellow-50 border border-yellow-200 rounded-lg p-4">
								<div class="flex items-center gap-2 mb-3">
									<div class="w-5 h-5 bg-yellow-100 rounded-full flex items-center justify-center">
										<span class="text-yellow-600 text-xs font-bold">!</span>
									</div>
									<p class="text-sm font-medium text-yellow-800">{ pageCtx.T("Transfers.Single.ExchangeNotice") }</p>
								</div>
								<div class="grid grid-cols-1 md:grid-cols-2 gap-4">
									<!-- Exchange Rate -->
									@input.Number(&input.Props{
										Label: pageCtx.T("Transfers.Single.ExchangeRate"),
										Attrs: templ.Attributes{
											"name":        "ExchangeRate",
											"value":       fmt.Sprintf("%.6f", props.TransferData.GetExchangeRate()),
											"step":        "0.000001",
											"min":         "0.000001",
											"placeholder": "1.000000",
										},
										Error: props.Errors["ExchangeRate"],
									})
									<!-- Destination Amount (calculated) -->
									@input.Number(&input.Props{
										Label: pageCtx.T("Transfers.Single.DestinationAmount"),
										Attrs: templ.Attributes{
											"name":        "DestinationAmount",
											"value":       fmt.Sprintf("%.2f", props.TransferData.GetDestinationAmount()),
											"step":        "0.01",
											"min":         "0.01",
											"placeholder": "0.00",
										},
										Error: props.Errors["DestinationAmount"],
									})
								</div>
								<!-- Hidden field to track if this is an exchange -->
								<input type="hidden" name="IsExchange" id="is-exchange" value="false"/>
							</div>
						</div>
						<!-- Comment -->
						@input.TextArea(&input.TextAreaProps{
							Label: pageCtx.T("Transfers.Single.Comment"),
							Attrs: templ.Attributes{
								"name":        "Comment",
								"placeholder": pageCtx.T("Transfers.Single.CommentPlaceholder"),
								"rows":        "3",
							},
							Value: props.TransferData.Comment,
							Error: props.Errors["Comment"],
						})
					</div>
				</div>
				<!-- Footer with buttons -->
				<div class="p-6 border-t border-gray-200 flex justify-end gap-3">
					@button.Secondary(button.Props{
						Attrs: templ.Attributes{
							"type":   "button",
							"@click": fmt.Sprintf("document.getElementById('transfer-drawer-%s-dialog').close()", props.SourceAccount.ID),
						},
					}) {
						{ pageCtx.T("Cancel") }
					}
					@button.Primary(button.Props{
						Attrs: templ.Attributes{
							"type": "submit",
						},
					}) {
						@icons.ArrowsLeftRight(icons.Props{Size: "16", Class: "mr-2"})
						{ pageCtx.T("Transfers.Single.Transfer") }
					}
				</div>
			</form>
		}
	</div>
	<!-- JavaScript for exchange rate calculations -->
	<script>
		function checkCurrencyMismatch() {
			const select = document.getElementById('destination-account-select');
			const exchangeFields = document.getElementById('exchange-fields');
			const isExchangeField = document.getElementById('is-exchange');
			
			if (!select || !exchangeFields || !isExchangeField) {
				return;
			}
			
			const sourceCurrency = select.dataset.sourceCurrency;
			const selectedOption = select.options[select.selectedIndex];
			const destCurrency = selectedOption ? selectedOption.dataset.currency : null;
			
			if (sourceCurrency && destCurrency && sourceCurrency !== destCurrency) {
				// Show exchange fields for cross-currency transfer
				exchangeFields.style.display = 'block';
				isExchangeField.value = 'true';
				
				// Set a default exchange rate if none exists
				const rateField = document.querySelector('input[name="ExchangeRate"]');
				if (rateField && (!rateField.value || rateField.value === '0.000000')) {
					rateField.value = '1.000000';
				}
				
				// Setup event listeners if not already done
				setupEventListeners();
				updateDestinationAmount();
			} else {
				// Hide exchange fields for same currency transfer
				exchangeFields.style.display = 'none';
				isExchangeField.value = 'false';
			}
		}
		
		function setupEventListeners() {
			const amountField = document.querySelector('input[name="Amount"]');
			const rateField = document.querySelector('input[name="ExchangeRate"]');
			const destAmountField = document.querySelector('input[name="DestinationAmount"]');
			
			if (amountField && !amountField.hasExchangeListener) {
				amountField.addEventListener('input', updateDestinationAmount);
				amountField.hasExchangeListener = true;
			}
			
			if (rateField && !rateField.hasExchangeListener) {
				rateField.addEventListener('input', updateDestinationAmount);
				rateField.hasExchangeListener = true;
			}
			
			if (destAmountField && !destAmountField.hasExchangeListener) {
				destAmountField.addEventListener('input', updateExchangeRate);
				destAmountField.hasExchangeListener = true;
			}
		}
		
		function updateExchangeCalculations() {
			updateDestinationAmount();
		}
		
		function updateDestinationAmount() {
			const amountField = document.querySelector('input[name="Amount"]');
			const rateField = document.querySelector('input[name="ExchangeRate"]');
			const destAmountField = document.querySelector('input[name="DestinationAmount"]');
			
			if (!amountField || !rateField || !destAmountField) {
				return;
			}
			
			const amount = parseFloat(amountField.value) || 0;
			const rate = parseFloat(rateField.value) || 1;
			const result = (amount * rate).toFixed(2);
			
			destAmountField.value = result;
		}
		
		function updateExchangeRate() {
			const amountField = document.querySelector('input[name="Amount"]');
			const rateField = document.querySelector('input[name="ExchangeRate"]');
			const destAmountField = document.querySelector('input[name="DestinationAmount"]');
			
			if (!amountField || !rateField || !destAmountField) {
				return;
			}
			
			const amount = parseFloat(amountField.value) || 0;
			const destAmount = parseFloat(destAmountField.value) || 0;
			if (amount > 0) {
				const result = (destAmount / amount).toFixed(6);
				rateField.value = result;
			}
		}
		
		// Initialize when DOM is ready
		document.addEventListener('DOMContentLoaded', function() {
			setTimeout(checkCurrencyMismatch, 100);
		});
		
		// Also initialize immediately for HTMX dynamic loading
		setTimeout(function() {
			checkCurrencyMismatch();
		}, 50);
	</script>
}
