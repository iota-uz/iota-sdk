package payments

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/templates/components"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type EditPageProps struct {
	Payment  *viewmodels.Payment
	Accounts []*viewmodels.MoneyAccount
	Errors   map[string]string
}

templ EditForm(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col justify-between h-full" id="edit-content">
		@card.Card(card.Props{
			Class:        "grid grid-cols-3 gap-4",
			WrapperClass: "m-6",
		}) {
			@input.Number(&input.Props{
				Label: pageCtx.T("Payments.Single.Amount"),
				Attrs: templ.Attributes{
					"value": props.Payment.Amount,
					"name":  "Amount",
					"form":  "save-form",
				},
				Error: props.Errors["Amount"],
			})
			@input.Date(&input.Props{
				Label: pageCtx.T("Payments.Single.Date"),
				Attrs: templ.Attributes{
					"value": props.Payment.TransactionDate,
					"name":  "Date",
					"form":  "save-form",
				},
				Error: props.Errors["Date"],
			})
			@input.Date(&input.Props{
				Label: pageCtx.T("Payments.Single.AccountingPeriod"),
				Error: props.Errors["AccountingPeriod"],
				Attrs: templ.Attributes{
					"value": props.Payment.AccountingPeriod,
					"name":  "AccountingPeriod",
					"form":  "save-form",
				},
			})
			@components.AccountSelect(&components.AccountSelectProps{
				Label:       pageCtx.T("Payments.Single.Account"),
				Placeholder: pageCtx.T("Payments.Single.SelectAccount"),
				Value:       props.Payment.AccountID,
				Accounts:    props.Accounts,
				Attrs: templ.Attributes{
					"name": "AccountId",
					"form": "save-form",
				},
			})
			@components.CounterpartySelect(&components.CounterpartySelectProps{
				Label:       pageCtx.T("Payments.Single.CounterpartyID.Label"),
				Placeholder: pageCtx.T("Payments.Single.CounterpartyID.Placeholder"),
				Form:        "save-form",
				Name:        "CounterpartyID",
			})
			@input.TextArea(&input.TextAreaProps{
				Label: pageCtx.T("Payments.Single.Comment"),
				Attrs: templ.Attributes{
					"value": props.Payment.Comment,
					"name":  "Comment",
					"form":  "save-form",
				},
				WrapperClass: "col-span-3",
			})
		}
		<div x-data class="h-20 shadow-t-lg border-t w-full flex items-center justify-end px-8 bg-surface-300 border-t-primary mt-auto gap-4">
			<form
				id="delete-form"
				hx-delete={ fmt.Sprintf("/finance/payments/%s", props.Payment.ID) }
				hx-trigger="submit"
				hx-target="closest .content"
				hx-swap="innerHTML"
				hx-indicator="#delete-payment-btn"
				hx-disabled-elt="find button"
			>
				@button.Danger(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":   "_action",
						"value":  "delete",
						"type":   "button",
						"@click": "$dispatch('open-delete-payment-confirmation')",
						"id":     "delete-payment-btn",
					},
				}) {
					{ pageCtx.T("Delete") }
				}
			</form>
			<form
				id="save-form"
				method="post"
				hx-post={ fmt.Sprintf("/finance/payments/%s", props.Payment.ID) }
				hx-indicator="#save-btn"
				hx-target="#edit-content"
				hx-swap="outerHTML"
			>
				@button.Primary(button.Props{
					Size: button.SizeMD,
					Attrs: templ.Attributes{
						"name":  "_action",
						"value": "save",
						"id":    "save-btn",
					},
				}) {
					{ pageCtx.T("Save") }
				}
			</form>
		</div>
	</div>
}

templ Edit(props *EditPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Payments.Edit.Meta.Title")},
	}) {
		@EditForm(props)
		@dialog.Confirmation(&dialog.Props{
			CancelText:  pageCtx.T("Cancel"),
			ConfirmText: pageCtx.T("Delete"),
			Heading:     pageCtx.T("Payments.Single.Delete"),
			Text:        pageCtx.T("Payments.Single.DeleteConfirmation"),
			Icon:        icons.Trash(icons.Props{Size: "20"}),
			Action:      "open-delete-payment-confirmation",
			Attrs: templ.Attributes{
				"@closing": `({target}) => {
     if (target.returnValue === "confirm") {
      let deleteForm = document.getElementById("delete-form");
      htmx.trigger(deleteForm, "submit");
     }
    }`,
			},
		})
	}
}
