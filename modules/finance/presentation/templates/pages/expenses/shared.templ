package expenses

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type AccountSelectProps struct {
	Value    string
	Accounts []*viewmodels.MoneyAccount
	Attrs    templ.Attributes
}

type CategorySelectProps struct {
	Value      string
	Categories []*viewmodels.ExpenseCategory
	Attrs      templ.Attributes
}

templ AccountSelect(props *AccountSelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Select(&base.SelectProps{
		Label:       pageCtx.T("Expenses.Single.Account"),
		Placeholder: pageCtx.T("Expenses.Single.SelectAccount"),
		Attrs:       props.Attrs,
	}) {
		for _, account := range props.Accounts {
			if account.ID == props.Value {
				<option value={ account.ID } selected>
					{ account.Name }
					{ account.CurrencySymbol }
				</option>
			} else {
				<option value={ account.ID }>
					{ account.Name }
					{ account.CurrencySymbol }
				</option>
			}
		}
	}
}

templ CategorySelect(props *CategorySelectProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Select(&base.SelectProps{
		Label:       pageCtx.T("Expenses.Single.Category"),
		Placeholder: pageCtx.T("Expenses.Single.SelectCategory"),
		Attrs:       props.Attrs,
	}) {
		for _, category := range props.Categories {
			if category.ID == props.Value {
				<option value={ category.ID } selected>
					{ category.Name }
				</option>
			} else {
				<option value={ category.ID }>
					{ category.Name }
				</option>
			}
		}
	}
}

// ExpenseRow renders a single expense row
templ ExpenseRow(expense *viewmodels.Expense, attrs *templ.Attributes) {
	@base.TableRow(base.TableRowProps{Attrs: *attrs}) {
		@base.TableCell(base.TableCellProps{}) {
			{ expense.Category.Name }
		}
		@base.TableCell(base.TableCellProps{}) {
			{ expense.AmountWithCurrency }
		}
		@base.TableCell(base.TableCellProps{}) {
			{ expense.AccountingPeriod }
		}
		@base.TableCell(base.TableCellProps{}) {
			{ expense.Date }
		}
		@base.TableCell(base.TableCellProps{}) {
			@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/finance/expenses/%s", expense.ID)}) {
				@icons.PencilSimple(icons.Props{Size: "20"})
			}
		}
	}
}
