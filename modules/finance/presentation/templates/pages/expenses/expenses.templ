package expenses

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/pagination"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/modules/finance/presentation/viewmodels"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

type IndexPageProps struct {
	Expenses        []*viewmodels.Expense
	PaginationState *pagination.State
}

templ ExpensesTable(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="flex flex-col gap-4 table-wrapper">
		if len(props.Expenses) == 0 {
			@base.TableEmptyState(base.TableEmptyStateProps{
				Title:       pageCtx.T("Expenses.List.NoExpenses.Title"),
				Description: pageCtx.T("Expenses.List.NoExpenses.Description"),
			})
		} else {
			@base.Table(base.TableProps{
				Columns: []*base.TableColumn{
					{Label: pageCtx.T("Expenses.List.Category"), Key: "name"},
					{Label: pageCtx.T("Expenses.List.Amount"), Key: "amount"},
					{Label: pageCtx.T("UpdatedAt"), Key: "updatedAt"},
					{Label: pageCtx.T("Actions"), Class: "w-16"},
				},
			}) {
				for _, expense := range props.Expenses {
					@base.TableRow(base.TableRowProps{}) {
						@base.TableCell(base.TableCellProps{}) {
							{ expense.Category.Name }
						}
						@base.TableCell(base.TableCellProps{}) {
							{ expense.AmountWithCurrency }
						}
						@base.TableCell(base.TableCellProps{}) {
							<div x-data="relativeformat">
								<span x-text={ fmt.Sprintf("format('%s')", expense.UpdatedAt) }></span>
							</div>
						}
						@base.TableCell(base.TableCellProps{}) {
							@button.Secondary(button.Props{Fixed: true, Size: button.SizeSM, Class: "btn-fixed", Href: fmt.Sprintf("/finance/expenses/%s", expense.ID)}) {
								@icons.PencilSimple(icons.Props{Size: "20"})
							}
						}
					}
				}
			}
			if len(props.PaginationState.Pages()) > 1 {
				@pagination.Pagination(props.PaginationState)
			}
		}
	</div>
}

templ ExpensesContent(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="m-6">
		<h1 class="text-2xl font-medium">
			{ pageCtx.T("NavigationLinks.Expenses") }
		</h1>
		<div class="mt-5 bg-surface-600 border border-primary rounded-lg">
			<form
				class="p-4 flex items-center gap-3"
				hx-get="/finance/expenses"
				hx-trigger="keyup changed delay:500ms from:(form input), change changed from:(form select)"
				hx-target=".table-wrapper"
				hx-swap="outerHTML"
			>
				@filters.Default(&filters.Props{
					Fields: []filters.SearchField{
						{
							Label: pageCtx.T("Expenses.List.Category"),
							Key:   "category",
						},
						{
							Label: pageCtx.T("Expenses.List.Amount"),
							Key:   "amount",
						},
					},
				})
				@button.Primary(button.Props{
					Size: button.SizeNormal, Href: "/finance/expenses/new",
					Icon: icons.PlusCircle(icons.Props{Size: "18"}),
				}) {
					{ pageCtx.T("Expenses.List.New") }
				}
			</form>
			@ExpensesTable(props)
		</div>
	</div>
}

templ Index(props *IndexPageProps) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: pageCtx.T("Expenses.Meta.List.Title")},
	}) {
		@ExpensesContent(props)
	}
}
