// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package multilang

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import (
	"context"
	"github.com/iota-uz/iota-sdk/pkg/crud"
	"github.com/iota-uz/iota-sdk/pkg/crud/models"
)

// FormInput renders a MultiLang field as an editable form input with custom label
// Provides separate inputs for each language with add/remove functionality
func FormInputWithLabel(ctx context.Context, field crud.Field, ml models.MultiLang, label string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<fieldset class=\"multilang-field border border-gray-300 rounded-lg p-4\"><legend class=\"text-sm font-medium text-gray-900 px-2\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var2 string
		templ_7745c5c3_Var2, templ_7745c5c3_Err = templ.JoinStringErrs(label)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 13, Col: 64}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var2))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</legend><div class=\"multilang-inputs space-y-3\" data-field=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(field.Name())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 14, Col: 67}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		for locale, value := range ml.GetAll() {
			if value != "" {
				templ_7745c5c3_Err = LocaleInput(ctx, locale, value, true).Render(ctx, templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err != nil {
					return templ_7745c5c3_Err
				}
			}
		}
		if !ml.HasLocale("en") {
			templ_7745c5c3_Err = LocaleInput(ctx, "en", "", true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if !ml.HasLocale("ru") {
			templ_7745c5c3_Err = LocaleInput(ctx, "ru", "", true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if !ml.HasLocale("uz") {
			templ_7745c5c3_Err = LocaleInput(ctx, "uz", "", true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		if !ml.HasLocale("uz-cyrl") {
			templ_7745c5c3_Err = LocaleInput(ctx, "uz-cyrl", "", true).Render(ctx, templ_7745c5c3_Buffer)
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div><div class=\"mt-3\"><button type=\"button\" class=\"add-locale-btn text-sm text-blue-600 hover:text-blue-800\" onclick=\"addLocaleInput(this)\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(localizeWithDefault(ctx, "multilang.add_language", "+ Add Language"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 41, Col: 74}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</button></div><input type=\"hidden\" name=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var5 string
		templ_7745c5c3_Var5, templ_7745c5c3_Err = templ.JoinStringErrs(field.Name())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 47, Col: 22}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var5))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "\" class=\"multilang-json\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var6 string
		templ_7745c5c3_Var6, templ_7745c5c3_Err = templ.JoinStringErrs(getJSONValue(ml))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 49, Col: 27}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var6))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "\"></fieldset>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// LocaleInput renders a single locale input row
func LocaleInput(ctx context.Context, locale, value string, removable bool) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var7 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var7 == nil {
			templ_7745c5c3_Var7 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "<div class=\"locale-row flex items-center space-x-2\"><input type=\"text\" class=\"locale-code w-16 px-2 py-1 text-xs border border-gray-300 rounded uppercase\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var8 string
		templ_7745c5c3_Var8, templ_7745c5c3_Err = templ.JoinStringErrs(locale)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 60, Col: 17}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var8))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "\" placeholder=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var9 string
		templ_7745c5c3_Var9, templ_7745c5c3_Err = templ.JoinStringErrs(localizeWithDefault(ctx, "multilang.locale_placeholder", "en"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 61, Col: 79}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var9))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 10, "\" maxlength=\"5\" onchange=\"validateAndUpdateJSON(this)\" onblur=\"validateLocaleCode(this)\"> <input type=\"text\" class=\"locale-value flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500\" value=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var10 string
		templ_7745c5c3_Var10, templ_7745c5c3_Err = templ.JoinStringErrs(value)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 69, Col: 16}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var10))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 11, "\" placeholder=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var11 string
		templ_7745c5c3_Var11, templ_7745c5c3_Err = templ.JoinStringErrs(localizeWithDefault(ctx, "multilang.text_placeholder", "Enter text in this language"))
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 70, Col: 102}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var11))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 12, "\" onchange=\"updateMultilangJSON(this)\" oninput=\"updateMultilangJSON(this)\"> ")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		if removable {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 13, "<button type=\"button\" class=\"remove-locale-btn text-red-600 hover:text-red-800 text-sm font-bold w-6 h-6\" onclick=\"removeLocaleInput(this)\" title=\"")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			var templ_7745c5c3_Var12 string
			templ_7745c5c3_Var12, templ_7745c5c3_Err = templ.JoinStringErrs(localizeWithDefault(ctx, "multilang.remove_language", "Remove this language"))
			if templ_7745c5c3_Err != nil {
				return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/multilang/form_input.templ`, Line: 79, Col: 89}
			}
			_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var12))
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 14, "\">×</button>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		} else {
			templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 15, "<div class=\"w-6\"></div>")
			if templ_7745c5c3_Err != nil {
				return templ_7745c5c3_Err
			}
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 16, "</div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Helper function to get JSON value for hidden field
func getJSONValue(ml models.MultiLang) string {
	if ml == nil || ml.IsEmpty() {
		return "{}"
	}

	jsonBytes, err := ml.ToJSON()
	if err != nil {
		return "{}"
	}

	return string(jsonBytes)
}

// Enhanced JavaScript helpers with validation and UX improvements
func multilangHelpers() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_multilangHelpers_f89e`,
		Function: `function __templ_multilangHelpers_f89e(){// Common language codes with validation
	const commonLanguages = ['en', 'ru', 'uz', 'uz-cyrl', 'es', 'fr', 'de', 'it', 'pt', 'ja', 'ko', 'zh', 'ar'];
	
	// Get existing locale codes to avoid duplicates
	function getExistingLocales(container) {
		const localeInputs = container.querySelectorAll('.locale-code');
		return Array.from(localeInputs).map(input => input.value.toLowerCase().trim()).filter(Boolean);
	}

	// Validate locale code format and check for duplicates
	window.validateLocaleCode = function(input) {
		const locale = input.value.toLowerCase().trim();
		const container = input.closest('.multilang-inputs');
		const currentRow = input.closest('.locale-row');
		
		// Remove current input from comparison
		const otherLocales = Array.from(container.querySelectorAll('.locale-code'))
			.filter(inp => inp.closest('.locale-row') !== currentRow)
			.map(inp => inp.value.toLowerCase().trim());
		
		// Check for duplicates
		if (otherLocales.includes(locale)) {
			input.classList.add('border-red-500');
			input.title = 'This language code is already used';
			showValidationError(input, 'Duplicate language code');
		}
		// Check format (2-5 characters, letters and dash, like uz-cyrl)
		else if (locale && !/^[a-z]{2,5}(-[a-z]{2,8})?$/.test(locale)) {
			input.classList.add('border-red-500');
			input.title = 'Language code should be 2-5 lowercase letters, optionally with variant (e.g., en, ru, uz-cyrl)';
			showValidationError(input, 'Invalid format');
		}
		else {
			input.classList.remove('border-red-500');
			input.title = '';
			clearValidationError(input);
		}
		
		input.value = locale;
	}

	// Show validation error
	function showValidationError(input, message) {
		clearValidationError(input);
		const error = document.createElement('div');
		error.className = 'validation-error text-xs text-red-600 mt-1';
		error.textContent = message;
		input.closest('.locale-row').appendChild(error);
	}

	// Clear validation error
	function clearValidationError(input) {
		const existing = input.closest('.locale-row').querySelector('.validation-error');
		if (existing) existing.remove();
	}

	// Validate and update JSON
	window.validateAndUpdateJSON = function(input) {
		window.validateLocaleCode(input);
		window.updateMultilangJSON(input);
	}

	// Add a new locale input row
	window.addLocaleInput = function(button) {
		const container = button.closest('.multilang-field').querySelector('.multilang-inputs');
		const existingLocales = getExistingLocales(container);
		
		// Suggest next available common language
		const suggestedLocale = commonLanguages.find(lang => !existingLocales.includes(lang)) || '';
		
		const row = document.createElement('div');
		row.className = 'locale-row flex items-center space-x-2';
		row.innerHTML = ` + "`" + `
			<input type="text" 
				class="locale-code w-16 px-2 py-1 text-xs border border-gray-300 rounded uppercase" 
				placeholder="en" 
				maxlength="5" 
				value="${suggestedLocale}"
				onchange="validateAndUpdateJSON(this)"
				onblur="validateLocaleCode(this)">
			<input type="text" 
				class="locale-value flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
				placeholder="Enter text in this language" 
				onchange="updateMultilangJSON(this)"
				oninput="updateMultilangJSON(this)">
			<button type="button" 
				class="remove-locale-btn text-red-600 hover:text-red-800 text-sm font-bold w-6 h-6" 
				onclick="removeLocaleInput(this)" 
				title="Remove this language">×</button>
		` + "`" + `;
		container.appendChild(row);
		
		// Focus on value input if locale is pre-filled, otherwise focus on locale input
		if (suggestedLocale) {
			row.querySelector('.locale-value').focus();
		} else {
			row.querySelector('.locale-code').focus();
		}
		
		window.updateMultilangJSON(row.querySelector('input'));
	}

	// Remove a locale input row with confirmation for non-empty values
	window.removeLocaleInput = function(button) {
		const row = button.closest('.locale-row');
		const valueInput = row.querySelector('.locale-value');
		
		// Confirm removal if there's content
		if (valueInput.value.trim() && !confirm('Remove this translation?')) {
			return;
		}
		
		const field = button.closest('.multilang-field');
		row.remove();
		
		// Update JSON after removal - find any remaining input in the field
		const remainingInput = field.querySelector('.locale-code, .locale-value');
		if (remainingInput) {
			window.updateMultilangJSON(remainingInput);
		} else {
			// No inputs left, clear the hidden field
			const hiddenField = field.querySelector('.multilang-json');
			if (hiddenField) {
				hiddenField.value = '{}';
			}
		}
	}

	// Update the hidden JSON field when inputs change
	window.updateMultilangJSON = function(input) {
		const field = input.closest('.multilang-field');
		const rows = field.querySelectorAll('.locale-row');
		const data = {};
		let hasErrors = false;
		
		rows.forEach(row => {
			const localeInput = row.querySelector('.locale-code');
			const valueInput = row.querySelector('.locale-value');
			const locale = localeInput.value.toLowerCase().trim();
			const value = valueInput.value.trim();
			
			// Check for validation errors
			if (localeInput.classList.contains('border-red-500')) {
				hasErrors = true;
				return;
			}
			
			if (locale && value) {
				data[locale] = value;
			}
		});
		
		const hiddenField = field.querySelector('.multilang-json');
		
		// Only update if no validation errors
		if (!hasErrors) {
			hiddenField.value = JSON.stringify(data);
		}
		
		// Always keep add button enabled - no restrictions
		const addButton = field.querySelector('.add-locale-btn');
		if (addButton) {
			addButton.disabled = false;
			addButton.classList.remove('opacity-50', 'cursor-not-allowed');
		}
	}

	// Initialize validation on page load
	document.addEventListener('DOMContentLoaded', function() {
		document.querySelectorAll('.multilang-field').forEach(field => {
			// Always enable the add button
			const addButton = field.querySelector('.add-locale-btn');
			if (addButton) {
				addButton.disabled = false;
				addButton.classList.remove('opacity-50', 'cursor-not-allowed');
			}
			
			field.querySelectorAll('.locale-code').forEach(input => {
				window.validateLocaleCode(input);
			});
			if (field.querySelector('input')) {
				window.updateMultilangJSON(field.querySelector('input'));
			}
		});
	});
}`,
		Call:       templ.SafeScript(`__templ_multilangHelpers_f89e`),
		CallInline: templ.SafeScriptInline(`__templ_multilangHelpers_f89e`),
	}
}

// FormInput renders a MultiLang field with fallback label (for backward compatibility)
func FormInput(ctx context.Context, field crud.Field, ml models.MultiLang) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var13 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var13 == nil {
			templ_7745c5c3_Var13 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = FormInputWithLabel(ctx, field, ml, getFieldLabel(ctx, field)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Include the JavaScript helpers
func FormInputWithJS(ctx context.Context, field crud.Field, ml models.MultiLang) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var14 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var14 == nil {
			templ_7745c5c3_Var14 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = FormInput(ctx, field, ml).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = multilangHelpers().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// Include the JavaScript helpers with custom label
func FormInputWithJSAndLabel(ctx context.Context, field crud.Field, ml models.MultiLang, label string) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var15 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var15 == nil {
			templ_7745c5c3_Var15 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = FormInputWithLabel(ctx, field, ml, label).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = multilangHelpers().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

// getFieldLabel returns the localized field label using the same pattern as crud_controller
func getFieldLabel(ctx context.Context, field crud.Field) string {
	// Use custom localization key if provided, otherwise use default pattern
	localizationKey := field.LocalizationKey()
	if localizationKey == "" {
		// Try to extract schema name from context or use generic pattern
		schemaName := getSchemaNameFromContext(ctx)
		if schemaName != "" {
			localizationKey = schemaName + ".Fields." + field.Name()
		} else {
			// Fallback to generic pattern when schema name is not available
			localizationKey = "Fields." + field.Name()
		}
	}

	// Try to localize with the same error handling as crud_controller
	fieldLabel := localizeWithDefault(ctx, localizationKey, field.Name())
	return fieldLabel
}

// getSchemaNameFromContext attempts to extract schema name from context
// This is a helper function that can be extended to support schema name in context
func getSchemaNameFromContext(ctx context.Context) string {
	// TODO: This could be implemented if schema name is added to context
	// For now, return empty string to use fallback pattern
	return ""
}

var _ = templruntime.GeneratedTemplate
