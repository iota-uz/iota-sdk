package multilang

import (
	"context"
	"github.com/iota-uz/iota-sdk/pkg/crud/models"
)

// DetailsView renders a MultiLang value for the details/view page
// Shows all translations in a structured format
templ DetailsView(ctx context.Context, ml models.MultiLang) {
	if ml.IsEmpty() {
		<span class="text-gray-400">{ localizeWithDefault(ctx, "multilang.no_translations", "No translations available") }</span>
	} else {
		<div class="multilang-details">
			for locale, value := range ml.GetAll() {
				if value != "" {
					<div class="locale-item mb-2">
						<span class="inline-block w-8 text-xs font-medium text-gray-600 uppercase">
							{ locale }:
						</span>
						<span class="ml-2 text-gray-900">{ value }</span>
					</div>
				}
			}
		</div>
	}
}

// DetailsViewCompact renders a compact version for smaller spaces
templ DetailsViewCompact(ctx context.Context, ml models.MultiLang) {
	if ml.IsEmpty() {
		<span class="text-gray-400">{ localizeWithDefault(ctx, "multilang.empty", "â€”") }</span>
	} else {
		<div class="multilang-compact">
			<div class="font-medium">{ ml.Default() }</div>
			if hasMultipleTranslations(ml) {
				<div class="text-xs text-gray-500 mt-1">
					{ getCompactText(ml) }
				</div>
			}
		</div>
	}
}

func hasMultipleTranslations(ml models.MultiLang) bool {
	count := 0
	for _, value := range ml.GetAll() {
		if value != "" {
			count++
		}
	}
	return count > 1
}

func getCompactText(ml models.MultiLang) string {
	allValues := ml.GetAll()
	defaultValue := ml.Default()
	
	others := ""
	for locale, value := range allValues {
		if value != "" && value != defaultValue {
			if others != "" {
				others += ", "
			}
			others += locale + ": " + value
		}
	}
	
	if others != "" {
		return "+" + string(rune(len(allValues)-1)) + " more: " + others
	}
	
	return ""
}