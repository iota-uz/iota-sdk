package multilang

import (
	"context"
	"github.com/iota-uz/iota-sdk/pkg/crud"
	"github.com/iota-uz/iota-sdk/pkg/crud/models"
)

// FormInput renders a MultiLang field as an editable form input
// Provides separate inputs for each language with add/remove functionality
templ FormInput(ctx context.Context, field crud.Field, ml models.MultiLang) {
	<fieldset class="multilang-field border border-gray-300 rounded-lg p-4">
		<legend class="text-sm font-medium text-gray-900 px-2">{ field.Name() }</legend>
		
		<div class="multilang-inputs space-y-3" data-field={ field.Name() }>
			// Show existing translations
			for locale, value := range ml.GetAll() {
				if value != "" {
					@LocaleInput(ctx, locale, value, true)
				}
			}
			
			// Show empty inputs for common languages if not present
			if !ml.HasLocale("en") {
				@LocaleInput(ctx, "en", "", true)
			}
			if !ml.HasLocale("ru") {
				@LocaleInput(ctx, "ru", "", true)
			}
			if !ml.HasLocale("uz") {
				@LocaleInput(ctx, "uz", "", true)
			}
		</div>
		
		<div class="mt-3">
			<button 
				type="button" 
				class="add-locale-btn text-sm text-blue-600 hover:text-blue-800"
				onclick="addLocaleInput(this)"
			>
				{ localizeWithDefault(ctx, "multilang.add_language", "+ Add Language") }
			</button>
		</div>
		
		// Hidden field to store the JSON value for form submission
		<input 
			type="hidden" 
			name={ field.Name() } 
			class="multilang-json" 
			value={ getJSONValue(ml) }
		/>
	</fieldset>
}

// LocaleInput renders a single locale input row
templ LocaleInput(ctx context.Context, locale, value string, removable bool) {
	<div class="locale-row flex items-center space-x-2">
		<input 
			type="text" 
			class="locale-code w-16 px-2 py-1 text-xs border border-gray-300 rounded uppercase" 
			value={ locale } 
			placeholder={ localizeWithDefault(ctx, "multilang.locale_placeholder", "en") }
			maxlength="5"
			onchange="validateAndUpdateJSON(this)"
			onblur="validateLocaleCode(this)"
		/>
		<input 
			type="text" 
			class="locale-value flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
			value={ value } 
			placeholder={ localizeWithDefault(ctx, "multilang.text_placeholder", "Enter text in this language") }
			onchange="updateMultilangJSON(this)"
			oninput="updateMultilangJSON(this)"
		/>
		if removable {
			<button 
				type="button" 
				class="remove-locale-btn text-red-600 hover:text-red-800 text-sm font-bold w-6 h-6"
				onclick="removeLocaleInput(this)"
				title={ localizeWithDefault(ctx, "multilang.remove_language", "Remove this language") }
			>
				×
			</button>
		} else {
			<div class="w-6"></div>
		}
	</div>
}

// Helper function to get JSON value for hidden field
func getJSONValue(ml models.MultiLang) string {
	if ml == nil || ml.IsEmpty() {
		return "{}"
	}
	
	jsonBytes, err := ml.ToJSON()
	if err != nil {
		return "{}"
	}
	
	return string(jsonBytes)
}

// Enhanced JavaScript helpers with validation and UX improvements
script multilangHelpers() {
	// Common language codes with validation
	const commonLanguages = ['en', 'ru', 'uz', 'es', 'fr', 'de', 'it', 'pt', 'ja', 'ko', 'zh', 'ar'];
	
	// Get existing locale codes to avoid duplicates
	function getExistingLocales(container) {
		const localeInputs = container.querySelectorAll('.locale-code');
		return Array.from(localeInputs).map(input => input.value.toLowerCase().trim()).filter(Boolean);
	}

	// Validate locale code format and check for duplicates
	window.validateLocaleCode = function(input) {
		const locale = input.value.toLowerCase().trim();
		const container = input.closest('.multilang-inputs');
		const currentRow = input.closest('.locale-row');
		
		// Remove current input from comparison
		const otherLocales = Array.from(container.querySelectorAll('.locale-code'))
			.filter(inp => inp.closest('.locale-row') !== currentRow)
			.map(inp => inp.value.toLowerCase().trim());
		
		// Check for duplicates
		if (otherLocales.includes(locale)) {
			input.classList.add('border-red-500');
			input.title = 'This language code is already used';
			showValidationError(input, 'Duplicate language code');
		}
		// Check format (2-5 characters, letters only)
		else if (locale && !/^[a-z]{2,5}$/.test(locale)) {
			input.classList.add('border-red-500');
			input.title = 'Language code should be 2-5 lowercase letters (e.g., en, ru, zh-cn)';
			showValidationError(input, 'Invalid format');
		}
		else {
			input.classList.remove('border-red-500');
			input.title = '';
			clearValidationError(input);
		}
		
		input.value = locale;
	}

	// Show validation error
	function showValidationError(input, message) {
		clearValidationError(input);
		const error = document.createElement('div');
		error.className = 'validation-error text-xs text-red-600 mt-1';
		error.textContent = message;
		input.closest('.locale-row').appendChild(error);
	}

	// Clear validation error
	function clearValidationError(input) {
		const existing = input.closest('.locale-row').querySelector('.validation-error');
		if (existing) existing.remove();
	}

	// Validate and update JSON
	window.validateAndUpdateJSON = function(input) {
		window.validateLocaleCode(input);
		window.updateMultilangJSON(input);
	}

	// Add a new locale input row
	window.addLocaleInput = function(button) {
		const container = button.closest('.multilang-field').querySelector('.multilang-inputs');
		const existingLocales = getExistingLocales(container);
		
		// Suggest next available common language
		const suggestedLocale = commonLanguages.find(lang => !existingLocales.includes(lang)) || '';
		
		const row = document.createElement('div');
		row.className = 'locale-row flex items-center space-x-2';
		row.innerHTML = `
			<input type="text" 
				class="locale-code w-16 px-2 py-1 text-xs border border-gray-300 rounded uppercase" 
				placeholder="en" 
				maxlength="5" 
				value="${suggestedLocale}"
				onchange="validateAndUpdateJSON(this)"
				onblur="validateLocaleCode(this)">
			<input type="text" 
				class="locale-value flex-1 px-3 py-2 border border-gray-300 rounded-md focus:ring-blue-500 focus:border-blue-500" 
				placeholder="Enter text in this language" 
				onchange="updateMultilangJSON(this)"
				oninput="updateMultilangJSON(this)">
			<button type="button" 
				class="remove-locale-btn text-red-600 hover:text-red-800 text-sm font-bold w-6 h-6" 
				onclick="removeLocaleInput(this)" 
				title="Remove this language">×</button>
		`;
		container.appendChild(row);
		
		// Focus on value input if locale is pre-filled, otherwise focus on locale input
		if (suggestedLocale) {
			row.querySelector('.locale-value').focus();
		} else {
			row.querySelector('.locale-code').focus();
		}
		
		window.updateMultilangJSON(row.querySelector('input'));
	}

	// Remove a locale input row with confirmation for non-empty values
	window.removeLocaleInput = function(button) {
		const row = button.closest('.locale-row');
		const valueInput = row.querySelector('.locale-value');
		
		// Confirm removal if there's content
		if (valueInput.value.trim() && !confirm('Remove this translation?')) {
			return;
		}
		
		const field = button.closest('.multilang-field');
		row.remove();
		
		// Update JSON after removal - find any remaining input in the field
		const remainingInput = field.querySelector('.locale-code, .locale-value');
		if (remainingInput) {
			window.updateMultilangJSON(remainingInput);
		} else {
			// No inputs left, clear the hidden field
			const hiddenField = field.querySelector('.multilang-json');
			if (hiddenField) {
				hiddenField.value = '{}';
			}
		}
	}

	// Update the hidden JSON field when inputs change
	window.updateMultilangJSON = function(input) {
		const field = input.closest('.multilang-field');
		const rows = field.querySelectorAll('.locale-row');
		const data = {};
		let hasErrors = false;
		
		rows.forEach(row => {
			const localeInput = row.querySelector('.locale-code');
			const valueInput = row.querySelector('.locale-value');
			const locale = localeInput.value.toLowerCase().trim();
			const value = valueInput.value.trim();
			
			// Check for validation errors
			if (localeInput.classList.contains('border-red-500')) {
				hasErrors = true;
				return;
			}
			
			if (locale && value) {
				data[locale] = value;
			}
		});
		
		const hiddenField = field.querySelector('.multilang-json');
		
		// Only update if no validation errors
		if (!hasErrors) {
			hiddenField.value = JSON.stringify(data);
		}
		
		// Always keep add button enabled - no restrictions
		const addButton = field.querySelector('.add-locale-btn');
		if (addButton) {
			addButton.disabled = false;
			addButton.classList.remove('opacity-50', 'cursor-not-allowed');
		}
	}

	// Initialize validation on page load
	document.addEventListener('DOMContentLoaded', function() {
		document.querySelectorAll('.multilang-field').forEach(field => {
			// Always enable the add button
			const addButton = field.querySelector('.add-locale-btn');
			if (addButton) {
				addButton.disabled = false;
				addButton.classList.remove('opacity-50', 'cursor-not-allowed');
			}
			
			field.querySelectorAll('.locale-code').forEach(input => {
				window.validateLocaleCode(input);
			});
			if (field.querySelector('input')) {
				window.updateMultilangJSON(field.querySelector('input'));
			}
		});
	});
}

// Include the JavaScript helpers
templ FormInputWithJS(ctx context.Context, field crud.Field, ml models.MultiLang) {
	@FormInput(ctx, field, ml)
	@multilangHelpers()
}