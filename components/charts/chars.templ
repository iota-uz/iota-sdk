package charts

import "github.com/iota-uz/utils/random"

type ChartOptions struct {
	Chart       ChartConfig `json:"chart"`
	Series      []Series    `json:"series"`
	XAxis       XAxisConfig `json:"xaxis"`
	YAxis       YAxisConfig `json:"yaxis"`
	Colors      []string    `json:"colors"`
	DataLabels  DataLabels  `json:"dataLabels"`
	Grid        GridConfig  `json:"grid"`
	PlotOptions PlotOptions `json:"plotOptions"`
}

type ChartConfig struct {
	Type    string  `json:"type"`
	Height  string  `json:"height"`
	Toolbar Toolbar `json:"toolbar"`
}

type Toolbar struct {
	Show bool `json:"show"`
}

type Series struct {
	Name string    `json:"name"`
	Data []float64 `json:"data"`
}

type XAxisConfig struct {
	Categories []string       `json:"categories"`
	Labels     LabelFormatter `json:"labels"`
}

type YAxisConfig struct {
	Labels LabelFormatter `json:"labels"`
}

type LabelFormatter struct {
	Style LabelStyle `json:"style"`
}

type LabelStyle struct {
	Colors   string `json:"colors"`
	FontSize string `json:"fontSize"`
}

type DataLabelStyle struct {
	Colors     []string `json:"colors"`
	FontSize   string   `json:"fontSize"`
	FontWeight string   `json:"fontWeight"`
}

type DataLabels struct {
	Enabled    bool               `json:"enabled"`
	Formatter  templ.JSExpression `json:"formatter,omitempty"`
	Style      DataLabelStyle     `json:"style"`
	OffsetY    int                `json:"offsetY"`
	DropShadow DropShadow         `json:"dropShadow"`
}

type DropShadow struct {
	Enabled bool    `json:"enabled"`
	Top     int     `json:"top"`
	Left    int     `json:"left"`
	Blur    int     `json:"blur"`
	Color   string  `json:"color"`
	Opacity float64 `json:"opacity"`
}

type GridConfig struct {
	BorderColor string `json:"borderColor"`
}

type PlotOptions struct {
	Bar BarConfig `json:"bar"`
}

type BarConfig struct {
	BorderRadius int       `json:"borderRadius"`
	ColumnWidth  string    `json:"columnWidth"`
	DataLabels   BarLabels `json:"dataLabels"`
}

type BarLabels struct {
	Position string `json:"position"`
}

script graph(id string, options ChartOptions) {
  document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(id);
    const chart = new ApexCharts(container, options);
    chart.render();
  });
}

type Props struct {
	Class   string
	Options ChartOptions
}

templ Chart(props Props) {
	{{
	id := random.String(10, random.AlphaNumericSet)
	}}
	<div
		id={ id }
		class={ props.Class }
	></div>
	@graph(id, props.Options)
}
