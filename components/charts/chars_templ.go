// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
// Package charts provides charting components for data visualization.

//

// It uses ApexCharts.js for client-side rendering and offers Go structures

// to configure various chart types like line, bar, and area charts.

package charts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/iota-uz/utils/random"

type ChartOptions struct {
	Chart       ChartConfig   `json:"chart"`
	Series      []Series      `json:"series"`
	XAxis       XAxisConfig   `json:"xaxis"`
	YAxis       YAxisConfig   `json:"yaxis"`
	Colors      []string      `json:"colors"`
	DataLabels  DataLabels    `json:"dataLabels"`
	Grid        GridConfig    `json:"grid"`
	PlotOptions PlotOptions   `json:"plotOptions"`
	Legend      LegendConfig  `json:"legend"`
	Tooltip     TooltipConfig `json:"tooltip"`
	Stroke      StrokeConfig  `json:"stroke,omitempty"`
	Fill        FillConfig    `json:"fill,omitempty"`
	Markers     MarkersConfig `json:"markers,omitempty"`
	States      StatesConfig  `json:"states,omitempty"`
}

type ChartConfig struct {
	Type    string  `json:"type"`
	Height  string  `json:"height"`
	Toolbar Toolbar `json:"toolbar"`
}

type Toolbar struct {
	Show bool `json:"show"`
}

type Series struct {
	Name string    `json:"name"`
	Data []float64 `json:"data"`
}

type XAxisConfig struct {
	Categories []string       `json:"categories"`
	Labels     LabelFormatter `json:"labels"`
	AxisBorder AxisBorder     `json:"axisBorder,omitempty"`
	AxisTicks  AxisTicks      `json:"axisTicks,omitempty"`
	Crosshairs Crosshairs     `json:"crosshairs,omitempty"`
}

type AxisBorder struct {
	Show bool `json:"show"`
}

type AxisTicks struct {
	Show bool `json:"show"`
}

type Crosshairs struct {
	Show     bool        `json:"show"`
	Width    int         `json:"width,omitempty"`
	Position string      `json:"position,omitempty"`
	Opacity  float64     `json:"opacity,omitempty"`
	Stroke   StrokeStyle `json:"stroke,omitempty"`
}

type YAxisConfig struct {
	Labels LabelFormatter `json:"labels"`
	Show   bool           `json:"show,omitempty"`
	Min    float64        `json:"min,omitempty"`
	Max    float64        `json:"max,omitempty"`
}

type LabelFormatter struct {
	Style     LabelStyle         `json:"style"`
	Show      bool               `json:"show,omitempty"`
	Formatter templ.JSExpression `json:"formatter,omitempty"`
}

type LabelStyle struct {
	Colors   string `json:"colors"`
	FontSize string `json:"fontSize"`
}

type DataLabelStyle struct {
	Colors     []string `json:"colors"`
	FontSize   string   `json:"fontSize"`
	FontWeight string   `json:"fontWeight"`
}

type DataLabels struct {
	Enabled    bool               `json:"enabled"`
	Formatter  templ.JSExpression `json:"formatter,omitempty"`
	Style      DataLabelStyle     `json:"style,omitempty"`
	OffsetY    int                `json:"offsetY,omitempty"`
	OffsetX    int                `json:"offsetX,omitempty"`
	DropShadow DropShadow         `json:"dropShadow,omitempty"`
}

type DropShadow struct {
	Enabled bool    `json:"enabled"`
	Top     int     `json:"top"`
	Left    int     `json:"left"`
	Blur    int     `json:"blur"`
	Color   string  `json:"color"`
	Opacity float64 `json:"opacity"`
}

type GridConfig struct {
	BorderColor     string   `json:"borderColor,omitempty"`
	Show            bool     `json:"show,omitempty"`
	StrokeDashArray int      `json:"strokeDashArray,omitempty"`
	Position        string   `json:"position,omitempty"`
	Padding         Padding  `json:"padding,omitempty"`
	XAxis           GridAxis `json:"xaxis,omitempty"`
	YAxis           GridAxis `json:"yaxis,omitempty"`
}

type GridAxis struct {
	Lines GridLines `json:"lines,omitempty"`
}

type GridLines struct {
	Show bool `json:"show,omitempty"`
}

type Padding struct {
	Top    int `json:"top,omitempty"`
	Right  int `json:"right,omitempty"`
	Bottom int `json:"bottom,omitempty"`
	Left   int `json:"left,omitempty"`
}

type LegendConfig struct {
	Show bool `json:"show"`
}

type TooltipConfig struct {
	Enabled        bool               `json:"enabled"`
	Shared         bool               `json:"shared,omitempty"`
	Intersect      bool               `json:"intersect,omitempty"`
	Custom         templ.JSExpression `json:"custom,omitempty"`
	OnDatasetHover OnDatasetHover     `json:"onDatasetHover,omitempty"`
	Fixed          Fixed              `json:"fixed,omitempty"`
}

type OnDatasetHover struct {
	HighlightDataSeries bool `json:"highlightDataSeries"`
}

type Fixed struct {
	Enabled bool `json:"enabled"`
}

type StrokeConfig struct {
	Curve     string   `json:"curve,omitempty"`
	Width     int      `json:"width,omitempty"`
	Colors    []string `json:"colors,omitempty"`
	DashArray int      `json:"dashArray,omitempty"`
}

type StrokeStyle struct {
	Color     string `json:"color,omitempty"`
	Width     int    `json:"width,omitempty"`
	DashArray int    `json:"dashArray,omitempty"`
}

type FillConfig struct {
	Type     string         `json:"type,omitempty"`
	Gradient GradientConfig `json:"gradient,omitempty"`
}

type GradientConfig struct {
	ShadeIntensity float64     `json:"shadeIntensity,omitempty"`
	OpacityFrom    float64     `json:"opacityFrom,omitempty"`
	OpacityTo      float64     `json:"opacityTo,omitempty"`
	Stops          []int       `json:"stops,omitempty"`
	ColorStops     []ColorStop `json:"colorStops,omitempty"`
}

type ColorStop struct {
	Offset  int     `json:"offset"`
	Color   string  `json:"color"`
	Opacity float64 `json:"opacity"`
}

type MarkersConfig struct {
	Size         int         `json:"size,omitempty"`
	Colors       []string    `json:"colors,omitempty"`
	StrokeColors string      `json:"strokeColors,omitempty"`
	StrokeWidth  int         `json:"strokeWidth,omitempty"`
	Hover        HoverConfig `json:"hover,omitempty"`
}

type HoverConfig struct {
	Size int `json:"size,omitempty"`
}

type StatesConfig struct {
	Hover  StateFilterConfig `json:"hover,omitempty"`
	Active StateFilterConfig `json:"active,omitempty"`
}

type StateFilterConfig struct {
	Filter FilterConfig `json:"filter,omitempty"`
}

type FilterConfig struct {
	Type string `json:"type,omitempty"`
}

type PlotOptions struct {
	Bar BarConfig `json:"bar,omitempty"`
	Pie PieConfig `json:"pie,omitempty"`
}

type PieConfig struct {
	Donut DonutConfig `json:"donut,omitempty"`
}

type DonutConfig struct {
	Size       string      `json:"size,omitempty"`
	Background string      `json:"background,omitempty"`
	Labels     DonutLabels `json:"labels,omitempty"`
}

type DonutLabels struct {
	Show bool `json:"show,omitempty"`
}

type BarConfig struct {
	BorderRadius            int       `json:"borderRadius"`
	ColumnWidth             string    `json:"columnWidth"`
	DataLabels              BarLabels `json:"dataLabels"`
	Distributed             bool      `json:"distributed,omitempty"`
	EndingShape             string    `json:"endingShape,omitempty"`
	BorderRadiusApplication string    `json:"borderRadiusApplication,omitempty"`
	Horizontal              bool      `json:"horizontal,omitempty"`
	BarHeight               string    `json:"barHeight,omitempty"`
}

type BarLabels struct {
	Position string `json:"position"`
}

func graph(id string, options ChartOptions) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_graph_737b`,
		Function: `function __templ_graph_737b(id, options){document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(id);
    const chart = new ApexCharts(container, options);
    chart.render();
  });
}`,
		Call:       templ.SafeScript(`__templ_graph_737b`, id, options),
		CallInline: templ.SafeScriptInline(`__templ_graph_737b`, id, options),
	}
}

// Props defines the configuration options for a Chart component.
type Props struct {
	Class   string       // Additional CSS classes to apply
	Options ChartOptions // Chart configuration options
}

// Chart renders a chart with the specified options.
// It generates a random ID for the chart container and initializes
// the ApexCharts library to render the chart on the client side.
func Chart(props Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		id := random.String(10, random.AlphaNumericSet)
		var templ_7745c5c3_Var2 = []any{props.Class}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 266, Col: 9}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graph(id, props.Options).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
