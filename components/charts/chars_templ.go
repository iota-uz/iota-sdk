// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
// Package charts provides charting components for data visualization.

//

// It uses ApexCharts.js for client-side rendering and offers Go structures

// to configure various chart types like line, bar, and area charts.

package charts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import (
	"github.com/a-h/templ"
	templruntime "github.com/a-h/templ/runtime"
	"github.com/iota-uz/iota-sdk/pkg/js"
	"github.com/iota-uz/utils/random"
)

func graph(id string, options templ.JSExpression) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_graph_b55a`,
		Function: `function __templ_graph_b55a(id, options){const renderChart = () => {
		const container = document.getElementById(id);
		if (!container) {
			console.error(` + "`" + `Chart container with ID ${id} not found.` + "`" + `);
			return;
		}
		const chart = new ApexCharts(container, options);
		chart.render();
	}
	document.addEventListener('DOMContentLoaded', () => {
		renderChart();
	});
	document.addEventListener('sdk:rerenderCharts', () => renderChart());
}`,
		Call:       templ.SafeScript(`__templ_graph_b55a`, id, options),
		CallInline: templ.SafeScriptInline(`__templ_graph_b55a`, id, options),
	}
}

func ensureChartEvents() templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_ensureChartEvents_a334`,
		Function: `function __templ_ensureChartEvents_a334(){// Ensure chart events are initialized
	// The chart-events.js file is loaded globally via base template
	if (typeof window.initializeChartEvents === 'function') {
		window.initializeChartEvents();
	}
}`,
		Call:       templ.SafeScript(`__templ_ensureChartEvents_a334`),
		CallInline: templ.SafeScriptInline(`__templ_ensureChartEvents_a334`),
	}
}

// Props defines the configuration options for a Chart component.
type Props struct {
	Class   string       // Additional CSS classes to apply
	Options ChartOptions // Chart configuration options
}

// Chart renders a chart with the specified options.
// It generates a random ID for the chart container and initializes
// the ApexCharts library to render the chart on the client side.
func Chart(props Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		id := random.String(10, random.AlphaNumericSet)
		opts, err := js.ToJS(props.Options)
		if err != nil {
			panic(err)
		}
		var templ_7745c5c3_Var2 = []any{props.Class}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 54, Col: 9}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graph(id, templ.JSExpression(opts)).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = ensureChartEvents().Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
