// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.819
package charts

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import "github.com/iota-uz/utils/random"

type ChartOptions struct {
	Chart       ChartConfig `json:"chart"`
	Series      []Series    `json:"series"`
	XAxis       XAxisConfig `json:"xaxis"`
	YAxis       YAxisConfig `json:"yaxis"`
	Colors      []string    `json:"colors"`
	DataLabels  DataLabels  `json:"dataLabels"`
	Grid        GridConfig  `json:"grid"`
	PlotOptions PlotOptions `json:"plotOptions"`
}

type ChartConfig struct {
	Type    string  `json:"type"`
	Height  string  `json:"height"`
	Toolbar Toolbar `json:"toolbar"`
}

type Toolbar struct {
	Show bool `json:"show"`
}

type Series struct {
	Name string    `json:"name"`
	Data []float64 `json:"data"`
}

type XAxisConfig struct {
	Categories []string       `json:"categories"`
	Labels     LabelFormatter `json:"labels"`
}

type YAxisConfig struct {
	Labels LabelFormatter `json:"labels"`
}

type LabelFormatter struct {
	Style LabelStyle `json:"style"`
}

type LabelStyle struct {
	Colors   string `json:"colors"`
	FontSize string `json:"fontSize"`
}

type DataLabelStyle struct {
	Colors     []string `json:"colors"`
	FontSize   string   `json:"fontSize"`
	FontWeight string   `json:"fontWeight"`
}

type DataLabels struct {
	Enabled    bool               `json:"enabled"`
	Formatter  templ.JSExpression `json:"formatter,omitempty"`
	Style      DataLabelStyle     `json:"style"`
	OffsetY    int                `json:"offsetY"`
	DropShadow DropShadow         `json:"dropShadow"`
}

type DropShadow struct {
	Enabled bool    `json:"enabled"`
	Top     int     `json:"top"`
	Left    int     `json:"left"`
	Blur    int     `json:"blur"`
	Color   string  `json:"color"`
	Opacity float64 `json:"opacity"`
}

type GridConfig struct {
	BorderColor string `json:"borderColor"`
}

type PlotOptions struct {
	Bar BarConfig `json:"bar"`
}

type BarConfig struct {
	BorderRadius int       `json:"borderRadius"`
	ColumnWidth  string    `json:"columnWidth"`
	DataLabels   BarLabels `json:"dataLabels"`
}

type BarLabels struct {
	Position string `json:"position"`
}

func graph(id string, options ChartOptions) templ.ComponentScript {
	return templ.ComponentScript{
		Name: `__templ_graph_737b`,
		Function: `function __templ_graph_737b(id, options){document.addEventListener('DOMContentLoaded', () => {
    const container = document.getElementById(id);
    const chart = new ApexCharts(container, options);
    chart.render();
  });
}`,
		Call:       templ.SafeScript(`__templ_graph_737b`, id, options),
		CallInline: templ.SafeScriptInline(`__templ_graph_737b`, id, options),
	}
}

type Props struct {
	Class   string
	Options ChartOptions
}

func Chart(props Props) templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)

		id := random.String(10, random.AlphaNumericSet)
		var templ_7745c5c3_Var2 = []any{props.Class}
		templ_7745c5c3_Err = templ.RenderCSSItems(ctx, templ_7745c5c3_Buffer, templ_7745c5c3_Var2...)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div id=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var3 string
		templ_7745c5c3_Var3, templ_7745c5c3_Err = templ.JoinStringErrs(id)
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 108, Col: 9}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var3))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "\" class=\"")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		var templ_7745c5c3_Var4 string
		templ_7745c5c3_Var4, templ_7745c5c3_Err = templ.JoinStringErrs(templ.CSSClasses(templ_7745c5c3_Var2).String())
		if templ_7745c5c3_Err != nil {
			return templ.Error{Err: templ_7745c5c3_Err, FileName: `components/charts/chars.templ`, Line: 1, Col: 0}
		}
		_, templ_7745c5c3_Err = templ_7745c5c3_Buffer.WriteString(templ.EscapeString(templ_7745c5c3_Var4))
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "\"></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = graph(id, props.Options).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
