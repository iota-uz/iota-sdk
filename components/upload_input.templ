package components

import (
	"fmt"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/viewmodels"
	"github.com/iota-uz/utils/random"
)

// UploadInputProps defines the properties for the UploadInput component.
// It provides configuration options for the file upload interface.
type UploadInputProps struct {
	ID          string               // Unique identifier for the input
	Label       string               // Text label for the upload button
	Placeholder string               // Placeholder text shown below the button
	Uploads     []*viewmodels.Upload // List of already uploaded files
	Error       string               // Error message to display
	Accept      string               // File types to accept (e.g., "image/*")
	Name        string               // Name attribute for the form field
	Form        string               // ID of the form this input belongs to
	Class       string               // Additional CSS classes
	Multiple    bool                 // Whether multiple file uploads are allowed
}

func newUploadInput(props *UploadInputProps) *UploadInputProps {
	if props.ID == "" {
		props.ID = random.String(12, random.LowerCharSet)
	}
	if props.Accept == "" {
		props.Accept = "image/*"
	}
	return props
}

templ UploadTarget(p *UploadInputProps) {
	<div class="flex gap-2">
		for _, upload := range p.Uploads {
			if upload.URL != "" {
				<img class="w-20 h-20 object-contain rounded-md" src={ upload.URL } alt="Uploaded image"/>
			} else {
				<svg class="w-16 mx-auto" width="70" height="46" viewBox="0 0 70 46" fill="none" xmlns="http://www.w3.org/2000/svg">
					<path d="M6.05172 9.36853L17.2131 7.5083V41.3608L12.3018 42.3947C9.01306 43.0871 5.79705 40.9434 5.17081 37.6414L1.14319 16.4049C0.515988 13.0978 2.73148 9.92191 6.05172 9.36853Z" fill="currentColor" stroke="currentColor" strokeWidth="2" class="fill-gray-100"></path><path d="M63.9483 9.36853L52.7869 7.5083V41.3608L57.6982 42.3947C60.9869 43.0871 64.203 40.9434 64.8292 37.6414L68.8568 16.4049C69.484 13.0978 67.2685 9.92191 63.9483 9.36853Z" fill="currentColor" stroke="currentColor" strokeWidth="2" class="fill-gray-100 stroke-on-surface-secondary"></path><rect x="17.0656" y="1.62305" width="35.8689" height="42.7541" rx="5" fill="currentColor" stroke="currentColor" strokeWidth="2" class="fill-gray-100 stroke-on-surface-secondary"></rect><path d="M47.9344 44.3772H22.0655C19.3041 44.3772 17.0656 42.1386 17.0656 39.3772L17.0656 35.9161L29.4724 22.7682L38.9825 33.7121C39.7832 34.6335 41.2154 34.629 42.0102 33.7025L47.2456 27.5996L52.9344 33.7209V39.3772C52.9344 42.1386 50.6958 44.3772 47.9344 44.3772Z" stroke="currentColor" strokeWidth="2" class="stroke-on-surface-secondary"></path>
					<circle cx="39.5902" cy="14.9672" r="4.16393" stroke="currentColor" stroke-width="2" class="stroke-on-surface-secondary"></circle>
				</svg>
			}
		}
	</div>
	if len(p.Uploads) > 0 {
		<input type="hidden" name={ p.Name } value={ p.Uploads[0].ID }/>
	}
}

templ (p *UploadInputProps) render() {
	<div class={ "border border-gray-400 border-dashed rounded-md p-4 flex flex-col items-center", p.Class }>
		<div class="flex flex-col items-center">
			<div id={ fmt.Sprintf("upload-form-%s", p.ID) }>
				<input
					id={ p.ID }
					type="file"
					class="sr-only"
					accept={ p.Accept }
					hx-trigger="change changed"
					hx-target={ fmt.Sprintf("#target-%s", p.ID) }
					hx-post="/uploads"
					hx-encoding="multipart/form-data"
					hx-vals={ fmt.Sprintf(`{"_id": "%s", "_formName": "%s", "_name": "%s"}`, p.ID, p.Form, p.Name) }
					name="file"
					multiple?={ p.Multiple }
					hx-on::after-request="this.value = ''"
				/>
			</div>
			<div id={ fmt.Sprintf("target-%s", p.ID) }>
				@UploadTarget(p)
			</div>
			<div class="flex gap-1 items-center mt-4 mb-1.5">
				@button.PrimaryOutline(button.Props{Size: button.SizeXS, Attrs: templ.Attributes{"type": "button"}}) {
					<label for={ p.ID } class="cursor-pointer">
						{ p.Label }
					</label>
				}
			</div>
			<p class="text-xs">
				{ p.Placeholder }
			</p>
			if p.Error != "" {
				<p class="text-red-500 text-xs mt-2">
					{ p.Error }
				</p>
			}
		</div>
	</div>
}

// UploadInput renders a file upload input with preview capability.
// It displays existing uploads and allows selecting new files.
templ UploadInput(props *UploadInputProps) {
	@newUploadInput(props).render()
}
