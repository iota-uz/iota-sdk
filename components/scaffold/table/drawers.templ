package table

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/dialog"
)

type DefaultDrawerProps struct {
	Title       string
	CallbackURL string
}

// DetailFieldValue represents a field value to display in the details drawer
type DetailFieldValue struct {
	Name  string
	Label string
	Value string
	Type  DetailFieldType
}

// DetailFieldType represents the type of field for display purposes
type DetailFieldType string

const (
	DetailFieldTypeText      DetailFieldType = "text"
	DetailFieldTypeBoolean   DetailFieldType = "boolean"
	DetailFieldTypeDate      DetailFieldType = "date"
	DetailFieldTypeTime      DetailFieldType = "time"
	DetailFieldTypeDateTime  DetailFieldType = "datetime"
	DetailFieldTypeBadge     DetailFieldType = "badge"
)

type DetailsDrawerProps struct {
	ID          string
	Title       string
	CallbackURL string
	Fields      []DetailFieldValue
	Actions     []DetailAction
}

type DetailAction struct {
	Label    string
	URL      string
	Method   string // GET, DELETE, etc.
	Class    string // btn-primary, btn-danger, etc.
	Confirm  string // Confirmation message for dangerous actions
}

templ DefaultDrawer(props DefaultDrawerProps) {
	@dialog.Drawer(dialog.DrawerProps{
		Direction: dialog.RTL,
		Action:    "open-default-drawer",
		Open:      true,
		Classes:   templ.Classes("flex items-stretch"),
		Attrs: templ.Attributes{
			"@closing": fmt.Sprintf("window.history.pushState({}, '', '%s')", props.CallbackURL),
			"@closed":  "document.getElementById('view-drawer').innerHTML = ''",
		},
	}) {
		<div class="bg-white w-full md:w-2/3 ml-auto">
			<div class="flex flex-col h-full">
				<form method="dialog">
					<div class="flex justify-between px-4 py-3 border-b border-primary">
						<h3 class="text-lg font-medium">
							{ props.Title }
						</h3>
						<div>
							<button class="cursor-pointer">
								@icons.XCircle(icons.Props{Size: "20"})
							</button>
						</div>
					</div>
				</form>
				<div class="flex-1 min-h-0 overflow-y-auto">
					{ children... }
				</div>
			</div>
		</div>
	}
}

templ DetailsDrawer(props DetailsDrawerProps) {
	<div id={ props.ID }>
		@dialog.StdViewDrawer(dialog.StdDrawerProps{
			ID:     props.ID + "-dialog",
			Title:  props.Title,
			Action: "open-view-drawer",
			Open:   true,
			Attrs: templ.Attributes{
				"@closing": fmt.Sprintf("window.history.pushState({}, '', '%s')", props.CallbackURL),
				"@closed":  fmt.Sprintf("document.getElementById('%s').remove()", props.ID),
			},
		}) {
			<div class="p-6 space-y-4">
				<dl class="divide-y divide-gray-100">
					for _, field := range props.Fields {
						<div class="px-4 py-6 sm:grid sm:grid-cols-3 sm:gap-4 sm:px-0">
							<dt class="text-sm font-medium leading-6 text-gray-900">
								{ field.Label }
							</dt>
							<dd class="mt-1 text-sm leading-6 text-gray-700 sm:col-span-2 sm:mt-0">
								@renderDetailFieldValue(field)
							</dd>
						</div>
					}
				</dl>
				
				if len(props.Actions) > 0 {
					<div class="mt-6 flex gap-3 justify-end">
						for _, action := range props.Actions {
							if action.Method == "DELETE" {
								<button 
									type="button" 
									class={ "btn " + action.Class }
									hx-delete={ action.URL }
									if action.Confirm != "" {
										hx-confirm={ action.Confirm }
									}
									hx-target={ "closest [id^='" + props.ID + "']" }
									hx-swap="outerHTML"
								>
									{ action.Label }
								</button>
							} else {
								<a href={ templ.SafeURL(action.URL) } class={ "btn " + action.Class }>
									{ action.Label }
								</a>
							}
						}
					</div>
				}
			</div>
		}
	</div>
}

templ renderDetailFieldValue(field DetailFieldValue) {
	if field.Value == "" {
		<span class="text-gray-400">-</span>
	} else {
		switch field.Type {
		case DetailFieldTypeBoolean:
			if field.Value == "true" {
				<span class="inline-flex items-center rounded-md bg-green-50 px-2 py-1 text-xs font-medium text-green-700 ring-1 ring-inset ring-green-600/20">True</span>
			} else {
				<span class="inline-flex items-center rounded-md bg-red-50 px-2 py-1 text-xs font-medium text-red-700 ring-1 ring-inset ring-red-600/20">False</span>
			}
		case DetailFieldTypeBadge:
			<span class="inline-flex items-center rounded-md bg-blue-50 px-2 py-1 text-xs font-medium text-blue-700 ring-1 ring-inset ring-blue-600/20">{ field.Value }</span>
		default:
			{ field.Value }
		}
	}
}
