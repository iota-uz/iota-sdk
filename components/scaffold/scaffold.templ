// Package scaffold provides utilities for generating dynamic UI components.
//
// It simplifies the creation of consistent data tables and other UI elements
// based on configuration and data, reducing boilerplate code.
package scaffold

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/components/filters"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/modules/core/presentation/templates/layouts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"time"
)

templ DateTime(ts time.Time) {
	<div x-data="relativeformat">
		<span x-text={ fmt.Sprintf(`format('%s')`, ts.Format(time.RFC3339)) }>
			{ ts.Format("2006-01-02 15:04:05") }
		</span>
	</div>
}

// Rows renders the table rows for a scaffold table
templ Rows(config *TableConfig) {
	<tr class="hidden">
		<td colspan={ fmt.Sprintf("%d", len(config.Columns)) }>
			@loaders.Spinner(loaders.SpinnerProps{
				ContainerClass: templ.Classes(
					"flex justify-center items-center py-4",
				),
			})
		</td>
	</tr>
	for _, item := range config.Rows {
		@base.TableRow(base.TableRowProps{
			Attrs: templ.Attributes{
				"class": "hide-on-load",
			},
		}) {
			for _, cell := range item.Cells() {
				@base.TableCell(base.TableCellProps{}) {
					@cell
				}
			}
		}
	}
}

// Table renders a dynamic table based on configuration and data
templ Table(config *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	if len(config.Rows) == 0 {
		@base.TableEmptyState(base.TableEmptyStateProps{
			Title:       pageCtx.T("Scaffold.Table.NoDataTitle"),
			Description: pageCtx.T("Scaffold.Table.NoDataDescription"),
		})
	} else {
		@base.Table(base.TableProps{
			Columns: toBaseTableColumns(config.Columns),
			TBodyAttrs: templ.Attributes{
				"id": "table-body",
			},
		}) {
			@Rows(config)
		}
	}
}

// TableContent renders the table with search and filters
templ TableContent(config *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div class="bg-surface-600 border border-primary rounded-lg">
		<form
			class="p-4 flex items-center gap-3"
			hx-get={ config.DataURL }
			hx-trigger="keyup changed delay:300ms from:(form input), change changed from:(form select), change from:(form input[type='checkbox'])"
			hx-target="#table-body"
			hx-swap="innerHTML"
			hx-indicator="#table-body"
		>
			<input type="hidden" name="page" value="1"/>
			<div class="flex-1">
				@input.Text(&input.Props{
					AddonLeft: &input.Addon{
						Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
					},
					Placeholder: pageCtx.T("Search"),
					Attrs: templ.Attributes{
						"name":  "search",
						"value": "",
					},
				})
			</div>
			<div class="hidden md:flex gap-3 h-full">
				for _, filter := range config.Filters {
					@filter.Component()
				}
			</div>
		</form>
		@Table(config)
	</div>
}

templ SideFilter() {
	<div class="bg-surface-600 border border-primary rounded-lg p-4 mb-4">
		<form
			hx-get="/users"
			hx-target="#table-body"
			hx-swap="innerHTML"
			hx-push-url="true"
			hx-indicator="#table-body"
			hx-trigger="change"
		>
			{ children... }
		</form>
	</div>
}

// Content renders the complete scaffold page content with filters and table
templ Content(config *TableConfig) {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@filters.Drawer(filters.DrawerProps{
		Heading: pageCtx.T("Scaffold.Filters.Title"),
		Action:  "open-filters",
	}) {
		for _, filter := range config.Filters {
			@filter.Component()
		}
	}
	<div class="m-6">
		<div class="flex justify-between md:justify-start">
			<h1 class="text-2xl font-medium">
				{ config.Title }
			</h1>
			<div class="flex md:hidden gap-2">
				@button.Secondary(button.Props{
					Size:  button.SizeNormal,
					Class: "bg-transparent",
					Icon:  icons.List(icons.Props{Size: "18"}),
					Attrs: templ.Attributes{
						"x-data": "",
						"@click": "$dispatch('open-filters')",
					},
				})
			</div>
		</div>
		if config.SideFilter != nil {
			<div class="mt-5 flex gap-5">
				<!-- Left sidebar with filters -->
				<div class="hidden md:block w-64 flex-shrink-0">
					@SideFilter() {
						@config.SideFilter
					}
				</div>
				<!-- Main content area with table -->
				<div class="flex-1">
					@TableContent(config)
				</div>
			</div>
		} else {
			<div class="mt-5">
				@TableContent(config)
			</div>
		}
	</div>
}

// Page renders a complete authenticated page with the scaffolded content
templ Page(config *TableConfig) {
	@layouts.Authenticated(layouts.AuthenticatedProps{
		BaseProps: layouts.BaseProps{Title: config.Title},
	}) {
		@Content(config)
	}
}

func toBaseTableColumns(columns []TableColumn) []*base.TableColumn {
	result := make([]*base.TableColumn, len(columns))
	for i, col := range columns {
		result[i] = &base.TableColumn{
			Key:   col.Key(),
			Label: col.Label(),
			Class: col.Class(),
		}
	}
	return result
}
