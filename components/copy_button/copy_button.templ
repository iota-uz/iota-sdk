package copy_button

import icons "github.com/iota-uz/icons/phosphor"

type Props struct {
	Text     string
	Size     string
	Class    string
	Variant  Variant
	ShowText bool
}

type Variant string

const (
	VariantDefault Variant = "default"
	VariantMinimal Variant = "minimal"
)

templ CopyButton(props Props) {
	{{ size := props.Size }}
	if size == "" {
		{{ size = "16" }}
	}
	{{ variant := props.Variant }}
	if variant == "" {
		{{ variant = VariantDefault }}
	}
	<button
		type="button"
		class={
			"inline-flex items-center gap-1 transition-all duration-200 text-gray-500 hover:text-gray-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-1 rounded cursor-pointer",
			templ.KV("bg-gray-100 hover:bg-gray-200 px-2 py-1", variant == VariantDefault),
			templ.KV("hover:bg-gray-100 p-1", variant == VariantMinimal),
			props.Class,
		}
		x-data={ `{
			copied: false,
			async copyText() {
				try {
					await navigator.clipboard.writeText('` + props.Text + `');
					this.copied = true;
					setTimeout(() => this.copied = false, 2000);
				} catch (err) {
					console.error('Failed to copy text: ', err);
				}
			}
		}` }
		@click="copyText()"
		x-bind:class="copied ? 'text-green-600' : ''"
	>
		<span x-show="!copied" x-transition>
			@icons.Copy(icons.Props{Size: size})
		</span>
		<span x-show="copied" x-transition>
			@icons.CheckCircle(icons.Props{Size: size})
		</span>
		if props.ShowText {
			<span class="text-xs font-medium" x-text="copied ? 'Copied!' : 'Copy'"></span>
		}
	</button>
}
