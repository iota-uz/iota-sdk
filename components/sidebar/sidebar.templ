package sidebar

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/button"
	"github.com/iota-uz/iota-sdk/components/base/navtabs"
)

type Props struct {
	Header    templ.Component
	TabGroups TabGroupCollection
	Footer    templ.Component
}

templ Sidebar(props Props) {
	<div
		x-data="sidebar()"
		x-cloak
		:class="{ 'sidebar-collapsed': isCollapsed }"
		x-init="initSidebar()"
		class="flex w-full flex-col bg-surface-200 shadow-lg py-6 h-screen sticky top-0 transition-all duration-300 overflow-visible"
	>
		{{
			// For single groups, use the group's value as default, otherwise use provided default
			defaultValue := props.TabGroups.DefaultValue
			if len(props.TabGroups.Groups) == 1 {
				defaultValue = props.TabGroups.Groups[0].Value
			}
			navTabsProps := navtabs.Props{
				DefaultValue: defaultValue,
				Attrs: templ.Attributes{
					"@tab-changed": "handleTabChange($event)",
				},
			}
		}}
		@navtabs.Root(navTabsProps) {
			<div :class="{ 'px-2': isCollapsed, 'px-6': !isCollapsed }" class="mb-4 transition-all duration-300">
				if props.Header != nil {
					@props.Header
				}
				if len(props.TabGroups.Groups) > 1 {
					<div x-show="!isCollapsed" x-transition>
						<div class="mt-4">
							@navtabs.List("w-full") {
								for _, group := range props.TabGroups.Groups {
									@navtabs.Button(group.Value) {
										{ group.Label }
									}
								}
							}
						</div>
					</div>
				}
			</div>
			@SidebarContent(props)
		}
	</div>
}

templ SidebarContent(props Props) {
	<div class="relative mb-4">
		<button
			@click="toggle(); $dispatch('sidebar-toggle')"
			class="btn btn-ghost btn-sm btn-fixed btn-rounded absolute -right-3 top-0 z-10 hidden lg:flex"
		>
			<div x-show="!isCollapsed">
				@icons.CaretLeft(icons.Props{Size: "16"})
			</div>
			<div x-show="isCollapsed">
				@icons.CaretRight(icons.Props{Size: "16"})
			</div>
		</button>
	</div>
	<nav class="py-4 flex-1">
		for _, tabGroup := range props.TabGroups.Groups {
			@navtabs.Content(tabGroup.Value) {
				<ul
					id="sidebar-navigation"
					:class="{ 'px-2': isCollapsed, 'px-6': !isCollapsed }"
					class="flex flex-col gap-2 overflow-y-auto h-[calc(100vh-17rem)] hide-scrollbar transition-all duration-300"
				>
					for _, item := range tabGroup.Items {
						if item.IsLink() {
							@AccordionLink(asLink(item))
						} else {
							@AccordionGroup(asGroup(item))
						}
					}
				</ul>
			}
		}
	</nav>
	if props.Footer != nil {
		<div :class="{ 'px-2': isCollapsed, 'px-6': !isCollapsed }" class="transition-all duration-300">
			@props.Footer
		</div>
	}
}

templ AccordionGroup(group Group) {
	<div>
		<!-- Collapsed view: only icon -->
		<div x-show="isCollapsed" class="accordion-group-collapsed w-full">
			if group.Icon() != nil {
				@group.Icon()
			}
		</div>
		<!-- Expanded view: full accordion -->
		<details x-show="!isCollapsed" class="group" open?={ group.IsActive(ctx) }>
			<summary class="btn btn-sidebar btn-md gap-2 w-full cursor-pointer">
				if group.Icon() != nil {
					@group.Icon()
				}
				{ group.Text() }
				@icons.CaretDown(icons.Props{Size: "16", Class: "ml-auto duration-200 group-open:rotate-180"})
			</summary>
			<ul class="ml-4 mt-2 flex flex-col gap-2">
				for _, child := range group.Children() {
					if child.IsLink() {
						@AccordionLink(asLink(child))
					} else {
						@AccordionGroup(asGroup(child))
					}
				}
			</ul>
		</details>
	</div>
}

templ AccordionLink(link Link) {
	{{
	className := "gap-2 w-full"
	if link.IsActive(ctx) {
		className = className + " active"
	}
	}}
	<li>
		<!-- Collapsed view: icon only -->
		<div x-show="isCollapsed">
			@button.Sidebar(button.Props{
				Size:  button.SizeMD,
				Href:  link.Href(),
				Class: "p-2 w-auto flex justify-center",
			}) {
				if link.Icon() != nil {
					<div class="w-6 h-6 flex items-center justify-center">
						@link.Icon()
					</div>
				}
			}
		</div>
		<!-- Expanded view: icon + text -->
		<div x-show="!isCollapsed">
			@button.Sidebar(button.Props{
				Size:  button.SizeMD,
				Href:  link.Href(),
				Class: className,
			}) {
				if link.Icon() != nil {
					@link.Icon()
				}
				{ link.Text() }
			}
		</div>
	</li>
}
