// Package filters provides components for filtering and searching data.
//
// It includes search fields, date range filters, and pagination controls
// that integrate with the application's form submission and data fetching.
package filters

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base"
	"github.com/iota-uz/iota-sdk/components/base/input"
	"github.com/iota-uz/iota-sdk/pkg/composables"
)

templ SearchFieldsTrigger(trigger *base.TriggerProps) {
	<button class="flex items-center gap-2" { trigger.ButtonAttrs... } type="button">
		<div class="flex items-center gap-2 whitespace-nowrap" x-show="selectedValues.size > 0">
			<span class="text-300">Поиск по: </span>
			<span x-show="selectedValues.size > 0" x-text="Array.from(selectedValues.values()).map((v) => v.label).join(', ')"></span>
		</div>
		@icons.ListMagnifyingGlass(icons.Props{Size: "20"})
	</button>
}

// SearchField represents a field that can be searched on.
type SearchField struct {
	Label string // Display name of the search field
	Key   string // Field key used in the search query
}

// Props defines configuration options for the Default filter component.
type Props struct {
	Fields []SearchField // List of fields available for searching
}

// SearchFields renders a dropdown list of available search fields.
// For a single field, it creates a hidden select. For multiple fields,
// it creates a combobox for selecting which field to search on.
templ SearchFields(fields []SearchField) {
	if len(fields) == 1 {
		<select name="Field" class="hidden">
			<option value={ fields[0].Key } selected>{ fields[0].Label }</option>
		</select>
	} else {
		@base.Combobox(base.ComboboxProps{
			Name:      "Field",
			ListClass: "!w-auto",
			Trigger: &base.Trigger{Render: func(props *base.TriggerProps) templ.Component {
				return SearchFieldsTrigger(props)
			}}}) {
			for _, field := range fields {
				<option value={ field.Key }>{ field.Label }</option>
			}
		}
	}
}

// Search renders a search input with field selection.
// It includes a search icon and allows selecting which field to search on.
templ Search(fields []SearchField) {
	{{ 	pageCtx := composables.UsePageCtx(ctx) }}
	@input.Text(&input.Props{
		AddonLeft: &input.Addon{
			Component: icons.MagnifyingGlass(icons.Props{Size: "20"}),
		},
		AddonRight: &input.Addon{
			Component: SearchFields(fields),
		},
		Placeholder: pageCtx.T("Search"),
		Attrs: templ.Attributes{
			"name": "Query",
		},
	})
}

// PageSize renders a select dropdown for choosing the number of items per page.
templ PageSize() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	@base.Select(&base.SelectProps{
		Prefix: pageCtx.T("PerPage"),
		Attrs: templ.Attributes{
			"name": "limit",
		},
	}) {
		<option value="15">15</option>
		<option value="25" selected>25</option>
		<option value="50">50</option>
		<option value="100">100</option>
	}
}

// CreatedAt renders a date range filter for filtering by creation date.
// It provides common options like today, yesterday, this week, etc.
templ CreatedAt() {
	{{ pageCtx := composables.UsePageCtx(ctx) }}
	<div x-data="dateFns" class="contents">
		<div x-data="{createdAt: ''}" class="contents">
			@base.Select(&base.SelectProps{
				Placeholder: pageCtx.T("CreatedAt"),
				Class:       "w-fit",
				Attrs: templ.Attributes{
					"x-model": "createdAt",
				}},
			) {
				<option value="" selected>{ pageCtx.T("Filters.CreatedAt.AllTime") }</option>
				<option :value="`${startOfDay(0)}|${endOfDay(0)}`">{ pageCtx.T("Filters.CreatedAt.Today") }</option>
				<option :value="`${startOfDay(1)}|${endOfDay(1)}`">{ pageCtx.T("Filters.CreatedAt.Yesterday") }</option>
				<option :value="`${startOfWeek()}|${endOfWeek()}`">{ pageCtx.T("Filters.CreatedAt.ThisWeek") }</option>
				<option :value="`${startOfWeek(1)}|${endOfWeek(1)}`">{ pageCtx.T("Filters.CreatedAt.LastWeek") }</option>
				<option :value="`${startOfMonth()}|${endOfMonth()}`">{ pageCtx.T("Filters.CreatedAt.ThisMonth") }</option>
			}
			<input type="hidden" name="CreatedAt.From" :value="createdAt.split('|')[0]"/>
			<input type="hidden" name="CreatedAt.To" :value="createdAt.split('|')?.[1]"/>
		</div>
	</div>
}

// Default renders a complete filter bar with search, page size, and date filters.
// It combines multiple filter components into a single interface.
templ Default(props *Props) {
	<div class="contents" x-data="dateFns">
		@Search(props.Fields)
		@PageSize()
		@CreatedAt()
	</div>
}
