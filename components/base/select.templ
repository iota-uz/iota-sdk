package base

import (
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/utils/random"
)

type SelectProps struct {
	Label       string
	Class       string
	Placeholder string
	Attrs       templ.Attributes
	Prefix      string
	id          string
	Error       string
}

func newSelect(p *SelectProps) *SelectProps {
	id := random.String(12, random.LowerCharSet)
	return &SelectProps{id: id, Label: p.Label, Class: p.Class, Attrs: p.Attrs, Placeholder: p.Placeholder, Prefix: p.Prefix, Error: p.Error}
}

templ (p *SelectProps) render() {
	<div class="flex flex-col shrink-0">
		if len(p.Label) > 0 {
			<label for={ p.id } class="form-control-label mb-2">{ p.Label }</label>
		}
		<div class="w-full relative flex items-center">
			if p.Prefix != "" {
				<label
					class="inline-flex items-center justify-center text-300 text-sm 
                whitespace-nowrap h-[2.6875rem] border-l border-t border-b border-primary rounded-l-lg px-[var(--form-control-size-x)]"
					for={ p.id }
				>
					{ p.Prefix }
				</label>
			}
			<select class={ "min-w-20 w-full appearance-none form-control form-control-input h-[2.6875rem] pr-8", templ.KV("rounded-l-none", p.Prefix != ""), p.Class } id={ p.id } disabled?={ p.Attrs["readonly"] == true || p.Attrs["disabled"] == true } { p.Attrs... }>
				if p.Placeholder != "" {
					<option disabled selected>{ p.Placeholder }</option>
				}
				{ children... }
			</select>
			@icons.CaretDown(icons.Props{Class: "absolute top-1/2 right-3 -translate-y-1/2 pointer-events-none", Size: "16"})
		</div>
		if p.Error != "" {
			<small
				class="text-xs text-red-500 mt-1"
				data-testid="field-error"
				data-field-id={ p.id }
			>
				{ p.Error }
			</small>
		}
	</div>
}

templ Select(p *SelectProps) {
	@newSelect(p).render() {
		{ children... }
	}
}
