package base

import (
	twmerge "github.com/Oudwins/tailwind-merge-go"
	icons "github.com/iota-uz/icons/phosphor"
)

type StickyPosition string

const (
	StickyPositionNone  = StickyPosition("none")
	StickyPositionLeft  = StickyPosition("left")
	StickyPositionRight = StickyPosition("right")
)

type SortDirection string

const (
	SortDirectionNone SortDirection = ""
	SortDirectionAsc  SortDirection = "asc"
	SortDirectionDesc SortDirection = "desc"
)

func (sd SortDirection) String() string {
	return string(sd)
}

func (sd SortDirection) IsAsc() bool {
	return sd == SortDirectionAsc
}

func (sd SortDirection) IsDesc() bool {
	return sd == SortDirectionDesc
}

func (sd SortDirection) IsNone() bool {
	return sd == SortDirectionNone
}

func ParseSortDirection(value string) SortDirection {
	switch value {
	case "asc":
		return SortDirectionAsc
	case "desc":
		return SortDirectionDesc
	default:
		return SortDirectionNone
	}
}

type TableColumn struct {
	Label     string
	Key       string
	Class     string
	Sortable  bool
	SortDir   SortDirection
	SortURL   string // URL for sorting this column
	StickyPos StickyPosition
}

type TableRowProps struct {
	Attrs templ.Attributes
}

type TableCellProps struct {
	Classes templ.CSSClasses
	Attrs   templ.Attributes
}

templ TableRow(props TableRowProps) {
	<tr { props.Attrs... }>
		{ children... }
	</tr>
}

templ TableCell(props TableCellProps) {
	<td
		class={ twmerge.Merge(templ.CSSClasses([]any{"p-4 border-r border-primary last-of-type:border-r-0", props.Classes}).String()) }
		{ props.Attrs... }
	>
		{ children... }
	</td>
}

type TableProps struct {
	Columns      []*TableColumn
	Classes      templ.CSSClasses
	Attrs        templ.Attributes
	TBodyClasses templ.CSSClasses
	TBodyAttrs   templ.Attributes
	NoTBody      bool
}

templ Table(props TableProps) {
	<div class="overflow-x-auto relative">
		<table
			class={
				twmerge.Merge(
					"min-w-full rounded-b-lg table bg-surface-600 text-sm",
					props.Classes.String(),
				),
			}
			{ props.Attrs... }
		>
			<thead>
				<tr class="bg-surface-500 text-200">
					for _, col := range props.Columns {
						if col.Sortable {
							<th
								class={ "px-4 py-3 font-medium text-left border-r border-primary last-of-type:border-r-0 border-b-0 cursor-pointer hover:bg-surface-400 transition-colors", col.Class }
								hx-get={ col.SortURL }
								hx-target="#sortable-table-container"
								hx-swap="outerHTML"
								hx-push-url="true"
								hx-indicator="#table-body"
							>
								<div class="flex items-center gap-2">
									<span>{ col.Label }</span>
									<span class="sort-indicator">
										if col.SortDir.IsAsc() {
											@icons.CaretDown(icons.Props{Size: "16"})
										} else if col.SortDir.IsDesc() {
											@icons.CaretUp(icons.Props{Size: "16"})
										} else {
											@icons.CaretUpDown(icons.Props{Size: "16", Class: "opacity-30"})
										}
									</span>
								</div>
							</th>
						} else {
							<th
								class={ "px-4 py-3 font-medium text-left border-r border-primary last-of-type:border-r-0 border-b-0", templ.KV("bg-surface-500 sticky shadow-lg", col.StickyPos == StickyPositionRight || col.StickyPos == StickyPositionLeft), templ.KV("right-0", col.StickyPos == StickyPositionRight), templ.KV("left-0", col.StickyPos == StickyPositionLeft), col.Class }
							>
								{ col.Label }
							</th>
						}
					}
				</tr>
			</thead>
			if props.NoTBody {
				{ children... }
			} else {
				<tbody
					class={ props.TBodyClasses }
					{ props.TBodyAttrs... }
				>
					{ children... }
				</tbody>
			}
		</table>
	</div>
}
