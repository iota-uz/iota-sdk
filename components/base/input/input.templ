package input

import (
	"github.com/Oudwins/tailwind-merge-go/pkg/twmerge"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/utils/random"
)

type Addon struct {
	Render    func(props *Props) templ.Component
	Component templ.Component
	Class     string
	Attrs     templ.Attributes
}

type Props struct {
	Placeholder  string
	Label        string
	Class        string
	Attrs        templ.Attributes
	WrapperProps templ.Attributes
	AddonRight   *Addon
	AddonLeft    *Addon
	Error        string
	id           string
	typ          string
}

func newInput(props *Props) *Props {
	id := random.String(12, random.LowerCharSet)
	props.id = id
	return props
}

templ (p *Props) render() {
	<div class="flex flex-col w-full">
		if len(p.Label) > 0 {
			<label for={ p.id } class="form-control-label mb-2">{ p.Label }</label>
		}
		<div class="flex items-center w-full relative form-control" { p.WrapperProps... }>
			if p.AddonLeft != nil {
				<div class={ "flex pl-2.5", p.AddonLeft.Class } { p.AddonLeft.Attrs... }>
					if p.AddonLeft.Render != nil {
						@p.AddonLeft.Render(p)
					} else if p.AddonLeft.Component != nil {
						@p.AddonLeft.Component
					}
				</div>
			}
			<input
				id={ p.id }
				class={ "form-control-input outline-none w-full", p.Class }
				type={ p.typ }
				placeholder={ p.Placeholder }
				{ p.Attrs... }
			/>
			if p.AddonRight != nil {
				<div class={ "flex pr-2.5", p.AddonRight.Class } { p.AddonRight.Attrs... }>
					if p.AddonRight.Render != nil {
						@p.AddonRight.Render(p)
					} else if p.AddonRight.Component != nil {
						@p.AddonRight.Component
					}
				</div>
			}
		</div>
		if p.Error != "" {
			<small
				class="text-xs text-red-500 mt-1"
				data-testid="field-error"
				data-field-id={ p.id }
			>
				{ p.Error }
			</small>
		}
	</div>
}

templ Text(props *Props) {
	@newInput(&Props{
		typ:          "text",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ Number(props *Props) {
	@newInput(&Props{
		typ:          "number",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ Email(props *Props) {
	@newInput(&Props{
		typ:          "email",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ Tel(props *Props) {
	@newInput(&Props{
		typ:          "tel",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ Date(props *Props) {
	@newInput(&Props{
		typ:          "date",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ DateTime(props *Props) {
	@newInput(&Props{
		typ:          "datetime-local",
		Class:        props.Class,
		Label:        props.Label,
		Attrs:        props.Attrs,
		Placeholder:  props.Placeholder,
		AddonRight:   props.AddonRight,
		AddonLeft:    props.AddonLeft,
		Error:        props.Error,
		WrapperProps: props.WrapperProps,
	}).render()
}

templ Color(props *Props) {
	{{
		if props.id == "" {
			props.id = random.String(12, random.LowerCharSet)
		}
	}}
	<div>
		<label
			for={ props.id }
			class="block text-sm font-medium mb-2 dark:text-white"
		>
			{ props.Label }
			<small class="text-xs text-red-500 mt-1">{ props.Error }</small>
		</label>
		<input
			type="color"
			class="p-1 h-10 w-14 block bg-white border border-gray-200 cursor-pointer rounded-lg disabled:opacity-50 disabled:pointer-events-none dark:bg-neutral-900 dark:border-neutral-700"
			id={ props.id }
			title="Choose your color"
		/>
	</div>
}

type CheckboxProps struct {
	Label     string
	LabelComp templ.Component
	Error     string
	Checked   bool
	Attrs     templ.Attributes
	Class     templ.CSSClasses
	ID        string
}

func newCheckbox(p *CheckboxProps) *CheckboxProps {
	if p.ID == "" {
		p.ID = random.String(12, random.LowerCharSet)
	}
	return p
}

templ (p *CheckboxProps) render() {
	<label
		for={ p.ID }
		class={
			twmerge.Merge(
				"form-control-label flex items-center cursor-pointer gap-3",
				p.Class.String(),
			),
		}
	>
		<input
			type="checkbox"
			id={ p.ID }
			class="peer appearance-none sr-only"
			checked?={ p.Checked }
			{ p.Attrs... }
		/>
		<!-- Visual checkbox box -->
		<div
			class="w-5 h-5 rounded-[5px] border border-gray-500 duration-200 flex items-center justify-center hover:border-brand-500 peer-indeterminate:bg-brand-500 peer-checked:bg-brand-500 peer-checked:text-white peer-indeterminate:text-white group"
		>
			@icons.Check(icons.Props{
				Size:  "16",
				Class: "scale-0 peer-indeterminate:group-[]:hidden peer-checked:group-[]:scale-100",
			})
			@icons.Minus(icons.Props{
				Size:  "16",
				Class: "scale-0 hidden peer-indeterminate:group-[]:inline peer-indeterminate:group-[]:scale-100",
			})
		</div>
		<!-- Optional label text -->
		if len(p.Label) > 0 {
			<span>{ p.Label }</span>
		}
		{ children... }
	</label>
}

templ Checkbox(p *CheckboxProps) {
	@newCheckbox(p).render() {
		{ children... }
	}
}

templ passwordLock(p *Props) {
	<label x-data="passwordVisibility" class="flex items-center justify-center mx-2.5">
		<input type="checkbox" class="appearance-none peer password-lock" value={ p.id } @change="toggle"/>
		@icons.Eye(icons.Props{Size: "20", Class: "absolute duration-200 scale-0 peer-checked:scale-100"})
		@icons.EyeSlash(icons.Props{Size: "20", Class: "absolute duration-200 peer-checked:scale-0"})
	</label>
}

templ Password(props *Props) {
	@newInput(&Props{
		typ:         "password",
		Class:       props.Class,
		Label:       props.Label,
		Attrs:       props.Attrs,
		Placeholder: props.Placeholder,
		Error:       props.Error,
		AddonRight: &Addon{
			Render: func(p *Props) templ.Component {
				return passwordLock(p)
			},
		},
		WrapperProps: props.WrapperProps,
	}).render()
}
