// Code generated by templ - DO NOT EDIT.

// templ: version: v0.3.857
package toast

//lint:file-ignore SA4006 This context is only used if a nested component is present.

import "github.com/a-h/templ"
import templruntime "github.com/a-h/templ/runtime"

import icons "github.com/iota-uz/icons/phosphor"

// Container renders the toast notification container that should be placed once in the layout
func Container() templ.Component {
	return templruntime.GeneratedTemplate(func(templ_7745c5c3_Input templruntime.GeneratedComponentInput) (templ_7745c5c3_Err error) {
		templ_7745c5c3_W, ctx := templ_7745c5c3_Input.Writer, templ_7745c5c3_Input.Context
		if templ_7745c5c3_CtxErr := ctx.Err(); templ_7745c5c3_CtxErr != nil {
			return templ_7745c5c3_CtxErr
		}
		templ_7745c5c3_Buffer, templ_7745c5c3_IsBuffer := templruntime.GetBuffer(templ_7745c5c3_W)
		if !templ_7745c5c3_IsBuffer {
			defer func() {
				templ_7745c5c3_BufErr := templruntime.ReleaseBuffer(templ_7745c5c3_Buffer)
				if templ_7745c5c3_Err == nil {
					templ_7745c5c3_Err = templ_7745c5c3_BufErr
				}
			}()
		}
		ctx = templ.InitializeContext(ctx)
		templ_7745c5c3_Var1 := templ.GetChildren(ctx)
		if templ_7745c5c3_Var1 == nil {
			templ_7745c5c3_Var1 = templ.NopComponent
		}
		ctx = templ.ClearChildren(ctx)
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 1, "<div x-data=\"{\n\t\t\tnotifications: [],\n\t\t\tdisplayDuration: 8000,\n\t\t\taddNotification(notification) {\n\t\t\t\tnotification.id = Date.now();\n\t\t\t\tthis.notifications.unshift(notification);\n\t\t\t\tif (this.notifications.length &gt; 20) {\n\t\t\t\t\tthis.notifications = this.notifications.slice(0, 20);\n\t\t\t\t}\n\t\t\t},\n\t\t\tremoveNotification(id) {\n\t\t\t\tthis.notifications = this.notifications.filter(n =&gt; n.id !== id);\n\t\t\t}\n\t\t}\" @notify.window=\"addNotification($event.detail)\" class=\"fixed top-0 right-0 z-50 w-full max-w-sm p-4 space-y-3 pointer-events-none\" aria-live=\"assertive\"><template x-for=\"notification in notifications\" :key=\"notification.id\"><div x-data=\"{\n\t\t\t\t\tisVisible: false,\n\t\t\t\t\ttimeout: null,\n\t\t\t\t\tisPaused: false,\n\t\t\t\t\tremainingTime: 8000,\n\t\t\t\t\tstartTime: null,\n\t\t\t\t\tinit() {\n\t\t\t\t\t\tthis.$nextTick(() =&gt; {\n\t\t\t\t\t\t\tthis.isVisible = true;\n\t\t\t\t\t\t\tthis.startDismissTimer();\n\t\t\t\t\t\t});\n\t\t\t\t\t},\n\t\t\t\t\tstartDismissTimer() {\n\t\t\t\t\t\tthis.startTime = Date.now();\n\t\t\t\t\t\tthis.timeout = setTimeout(() =&gt; {\n\t\t\t\t\t\t\tthis.dismiss();\n\t\t\t\t\t\t}, this.remainingTime);\n\t\t\t\t\t},\n\t\t\t\t\tpauseTimer() {\n\t\t\t\t\t\tif (!this.isPaused &amp;&amp; this.timeout) {\n\t\t\t\t\t\t\tclearTimeout(this.timeout);\n\t\t\t\t\t\t\tthis.remainingTime -= Date.now() - this.startTime;\n\t\t\t\t\t\t\tthis.isPaused = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tresumeTimer() {\n\t\t\t\t\t\tif (this.isPaused) {\n\t\t\t\t\t\t\tthis.isPaused = false;\n\t\t\t\t\t\t\tthis.startDismissTimer();\n\t\t\t\t\t\t}\n\t\t\t\t\t},\n\t\t\t\t\tdismiss() {\n\t\t\t\t\t\tthis.isVisible = false;\n\t\t\t\t\t\tsetTimeout(() =&gt; {\n\t\t\t\t\t\t\tthis.$dispatch(&#39;remove-notification&#39;, notification.id);\n\t\t\t\t\t\t}, 300);\n\t\t\t\t\t}\n\t\t\t\t}\" @remove-notification.window=\"if ($event.detail === notification.id) $root.closest(&#39;[x-data]&#39;).parentElement.querySelector(&#39;[x-data]&#39;).__x.$data.removeNotification(notification.id)\" @mouseenter=\"pauseTimer()\" @mouseleave=\"resumeTimer()\" x-show=\"isVisible\" x-transition:enter=\"transition ease-out duration-300\" x-transition:enter-start=\"opacity-0 translate-x-full\" x-transition:enter-end=\"opacity-100 translate-x-0\" x-transition:leave=\"transition ease-in duration-300\" x-transition:leave-start=\"opacity-100 translate-x-0\" x-transition:leave-end=\"opacity-0 translate-x-full\" class=\"pointer-events-auto\"><!-- Success Variant --><div x-show=\"notification.variant === &#39;success&#39;\" class=\"flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800\" role=\"status\"><div class=\"flex-shrink-0 w-5 h-5 text-green-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.CheckCircle(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 2, "</div><div class=\"flex-1 min-w-0\"><p x-show=\"notification.title\" x-text=\"notification.title\" class=\"text-sm font-semibold text-neutral-900 dark:text-white\"></p><p x-show=\"notification.message\" x-text=\"notification.message\" class=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\"></p></div><button @click=\"dismiss()\" type=\"button\" class=\"flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors\" aria-label=\"Close notification\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.X(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 3, "</button></div><!-- Error/Danger Variant --><div x-show=\"notification.variant === &#39;error&#39; || notification.variant === &#39;danger&#39;\" class=\"flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800\" role=\"alert\"><div class=\"flex-shrink-0 w-5 h-5 text-red-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.XCircle(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 4, "</div><div class=\"flex-1 min-w-0\"><p x-show=\"notification.title\" x-text=\"notification.title\" class=\"text-sm font-semibold text-neutral-900 dark:text-white\"></p><p x-show=\"notification.message\" x-text=\"notification.message\" class=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\"></p></div><button @click=\"dismiss()\" type=\"button\" class=\"flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors\" aria-label=\"Close notification\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.X(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 5, "</button></div><!-- Warning Variant --><div x-show=\"notification.variant === &#39;warning&#39;\" class=\"flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800\" role=\"alert\"><div class=\"flex-shrink-0 w-5 h-5 text-yellow-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.Warning(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 6, "</div><div class=\"flex-1 min-w-0\"><p x-show=\"notification.title\" x-text=\"notification.title\" class=\"text-sm font-semibold text-neutral-900 dark:text-white\"></p><p x-show=\"notification.message\" x-text=\"notification.message\" class=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\"></p></div><button @click=\"dismiss()\" type=\"button\" class=\"flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors\" aria-label=\"Close notification\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.X(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 7, "</button></div><!-- Info Variant --><div x-show=\"notification.variant === &#39;info&#39;\" class=\"flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800\" role=\"status\"><div class=\"flex-shrink-0 w-5 h-5 text-blue-500\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.Info(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 8, "</div><div class=\"flex-1 min-w-0\"><p x-show=\"notification.title\" x-text=\"notification.title\" class=\"text-sm font-semibold text-neutral-900 dark:text-white\"></p><p x-show=\"notification.message\" x-text=\"notification.message\" class=\"text-sm text-neutral-600 dark:text-neutral-400 mt-1\"></p></div><button @click=\"dismiss()\" type=\"button\" class=\"flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors\" aria-label=\"Close notification\">")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = icons.X(icons.Props{Size: "20"}).Render(ctx, templ_7745c5c3_Buffer)
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		templ_7745c5c3_Err = templruntime.WriteString(templ_7745c5c3_Buffer, 9, "</button></div></div></template></div>")
		if templ_7745c5c3_Err != nil {
			return templ_7745c5c3_Err
		}
		return nil
	})
}

var _ = templruntime.GeneratedTemplate
