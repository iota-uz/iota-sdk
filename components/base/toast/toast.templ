package toast

import icons "github.com/iota-uz/icons/phosphor"

// Container renders the toast notification container that should be placed once in the layout
templ Container() {
	<div
		x-data="{
			notifications: [],
			displayDuration: 8000,
			addNotification(notification) {
				notification.id = Date.now();
				this.notifications.unshift(notification);
				if (this.notifications.length > 20) {
					this.notifications = this.notifications.slice(0, 20);
				}
			},
			removeNotification(id) {
				this.notifications = this.notifications.filter(n => n.id !== id);
			}
		}"
		@notify.window="addNotification($event.detail)"
		class="fixed top-0 right-0 z-50 w-full max-w-sm p-4 space-y-3 pointer-events-none"
		aria-live="assertive"
	>
		<template x-for="notification in notifications" :key="notification.id">
			<div
				x-data="{
					isVisible: false,
					timeout: null,
					isPaused: false,
					remainingTime: 8000,
					startTime: null,
					init() {
						this.$nextTick(() => {
							this.isVisible = true;
							this.startDismissTimer();
						});
					},
					startDismissTimer() {
						this.startTime = Date.now();
						this.timeout = setTimeout(() => {
							this.dismiss();
						}, this.remainingTime);
					},
					pauseTimer() {
						if (!this.isPaused && this.timeout) {
							clearTimeout(this.timeout);
							this.remainingTime -= Date.now() - this.startTime;
							this.isPaused = true;
						}
					},
					resumeTimer() {
						if (this.isPaused) {
							this.isPaused = false;
							this.startDismissTimer();
						}
					},
					dismiss() {
						this.isVisible = false;
						setTimeout(() => {
							this.$dispatch('remove-notification', notification.id);
						}, 300);
					}
				}"
				@remove-notification.window="if ($event.detail === notification.id) $root.closest('[x-data]').parentElement.querySelector('[x-data]').__x.$data.removeNotification(notification.id)"
				@mouseenter="pauseTimer()"
				@mouseleave="resumeTimer()"
				x-show="isVisible"
				x-transition:enter="transition ease-out duration-300"
				x-transition:enter-start="opacity-0 translate-x-full"
				x-transition:enter-end="opacity-100 translate-x-0"
				x-transition:leave="transition ease-in duration-300"
				x-transition:leave-start="opacity-100 translate-x-0"
				x-transition:leave-end="opacity-0 translate-x-full"
				class="pointer-events-auto"
			>
				<!-- Success Variant -->
				<div
					x-show="notification.variant === 'success'"
					class="flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800"
					role="status"
				>
					<div class="flex-shrink-0 w-5 h-5 text-green-500">
						@icons.CheckCircle(icons.Props{Size: "20"})
					</div>
					<div class="flex-1 min-w-0">
						<p x-show="notification.title" x-text="notification.title" class="text-sm font-semibold text-neutral-900 dark:text-white"></p>
						<p x-show="notification.message" x-text="notification.message" class="text-sm text-neutral-600 dark:text-neutral-400 mt-1"></p>
					</div>
					<button
						@click="dismiss()"
						type="button"
						class="flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors"
						aria-label="Close notification"
					>
						@icons.X(icons.Props{Size: "20"})
					</button>
				</div>
				<!-- Error/Danger Variant -->
				<div
					x-show="notification.variant === 'error' || notification.variant === 'danger'"
					class="flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800"
					role="alert"
				>
					<div class="flex-shrink-0 w-5 h-5 text-red-500">
						@icons.XCircle(icons.Props{Size: "20"})
					</div>
					<div class="flex-1 min-w-0">
						<p x-show="notification.title" x-text="notification.title" class="text-sm font-semibold text-neutral-900 dark:text-white"></p>
						<p x-show="notification.message" x-text="notification.message" class="text-sm text-neutral-600 dark:text-neutral-400 mt-1"></p>
					</div>
					<button
						@click="dismiss()"
						type="button"
						class="flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors"
						aria-label="Close notification"
					>
						@icons.X(icons.Props{Size: "20"})
					</button>
				</div>
				<!-- Warning Variant -->
				<div
					x-show="notification.variant === 'warning'"
					class="flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800"
					role="alert"
				>
					<div class="flex-shrink-0 w-5 h-5 text-yellow-500">
						@icons.Warning(icons.Props{Size: "20"})
					</div>
					<div class="flex-1 min-w-0">
						<p x-show="notification.title" x-text="notification.title" class="text-sm font-semibold text-neutral-900 dark:text-white"></p>
						<p x-show="notification.message" x-text="notification.message" class="text-sm text-neutral-600 dark:text-neutral-400 mt-1"></p>
					</div>
					<button
						@click="dismiss()"
						type="button"
						class="flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors"
						aria-label="Close notification"
					>
						@icons.X(icons.Props{Size: "20"})
					</button>
				</div>
				<!-- Info Variant -->
				<div
					x-show="notification.variant === 'info'"
					class="flex items-start gap-3 w-full p-4 bg-white dark:bg-neutral-900 rounded-lg shadow-lg border border-neutral-200 dark:border-neutral-800"
					role="status"
				>
					<div class="flex-shrink-0 w-5 h-5 text-blue-500">
						@icons.Info(icons.Props{Size: "20"})
					</div>
					<div class="flex-1 min-w-0">
						<p x-show="notification.title" x-text="notification.title" class="text-sm font-semibold text-neutral-900 dark:text-white"></p>
						<p x-show="notification.message" x-text="notification.message" class="text-sm text-neutral-600 dark:text-neutral-400 mt-1"></p>
					</div>
					<button
						@click="dismiss()"
						type="button"
						class="flex-shrink-0 text-neutral-400 hover:text-neutral-600 dark:hover:text-neutral-200 transition-colors"
						aria-label="Close notification"
					>
						@icons.X(icons.Props{Size: "20"})
					</button>
				</div>
			</div>
		</template>
	</div>
}
