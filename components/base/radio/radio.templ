// Package radio implements customizable radio button components.
//
// Example usage:
//
//	@radio.RadioGroup(&radio.RadioGroupProps{
//		Name: "fruit",
//		Label: "Select a fruit",
//		Orientation: radio.OrientationHorizontal,
//	}) {
//		@radio.CardItem(&radio.CardItemProps{
//			Value: "apple",
//			Name: "fruit",
//			Checked: true,
//		})
//		@radio.CardItem(&radio.CardItemProps{
//			Value: "orange",
//			Name: "fruit",
//		})
//		@radio.CardItem(&radio.CardItemProps{
//			Value: "banana",
//			Name: "fruit",
//			Disabled: true,
//		})
//	}
package radio

import twmerge "github.com/Oudwins/tailwind-merge-go"

// Orientation defines the layout direction of radio items
type Orientation string

const (
	OrientationVertical   Orientation = "vertical"
	OrientationHorizontal Orientation = "horizontal"
)

// RadioGroupProps configures the RadioGroup component's behavior and appearance.
type RadioGroupProps struct {
	Label        string
	Error        string
	Class        string
	Attrs        templ.Attributes
	WrapperProps templ.Attributes
	Orientation  Orientation // Layout direction: vertical (default) or horizontal
}

// CardItemProps configures an individual radio input styled as a card.
type CardItemProps struct {
	WrapperClass templ.CSSClasses
	Class        templ.CSSClasses
	Name         string
	Checked      bool
	Disabled     bool
	Attrs        templ.Attributes
	Value        string
	Form         string
}

// RadioGroup creates a container for radio inputs with optional label and error message.
// Child components (typically CardItem elements) are rendered within the group.
templ RadioGroup(props RadioGroupProps) {
	<div class="w-full" { props.WrapperProps... }>
		if len(props.Label) > 0 {
			<h2 class="form-control-label mb-2">{ props.Label }</h2>
		}
		<div
			class={ twmerge.Merge(
					"flex w-full gap-2 " + getOrientationClass(props.Orientation),
					props.Class,
				) }
			{ props.Attrs... }
		>
			{ children... }
		</div>
		if props.Error != "" {
			<small class="text-xs text-red-500 mt-1">{ props.Error }</small>
		}
	</div>
}

// CardItem renders a styled radio input as a card-like UI element.
// Children are rendered as the label content next to the radio indicator.
templ CardItem(props CardItemProps) {
	<label
		class={
			twmerge.Merge(
				"flex items-center gap-2 bg-surface-100 text-text-300 p-2.5 rounded-lg",
				"border border-primary duration-300 has-[input:checked]:border-brand-500 cursor-pointer",
				props.WrapperClass.String(),
			),
		}
	>
		<input
			type="radio"
			name={ props.Name }
			class="sr-only peer"
			value={ props.Value }
			disabled?={ props.Disabled }
			checked?={ props.Checked }
			{ props.Attrs... }
		/>
		<div
			class={
				twmerge.Merge(
					"w-5 h-5 border border-primary rounded-full druation-300 peer-checked:border-brand-500 relative after:absolute after:duration-300 after:w-3 after:h-3 after:rounded-full after:left-1/2 after:top-1/2 after:-translate-x-1/2 after:-translate-y-1/2 peer-checked:after:bg-brand-500",
					props.Class.String(),
				),
			}
		></div>
		<span class="text-300 peer-checked:text-100 font-medium text-sm">
			{ children... }
		</span>
	</label>
}

func getOrientationClass(orientation Orientation) string {
	if orientation == OrientationHorizontal {
		return "grid-flow-col"
	}
	return ""
}
