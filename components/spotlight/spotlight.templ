// Package spotlight provides a search dialog for quickly finding content.
//
// It implements a keyboard-accessible search interface similar to Spotlight on macOS
// or Command Palette in VS Code, allowing users to quickly find and navigate to content.
package spotlight

import (
	"fmt"
	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/loaders"
	"github.com/iota-uz/iota-sdk/pkg/intl"
)

// Spotlight renders a search dialog component that can be triggered
// with a button click or keyboard shortcut.
templ Spotlight() {
	<div
		x-data="spotlight"
		class="relative"
		x-id="['spotlight', 'spinner']"
	>
		<button
			@click="open()"
			class="flex items-center justify-center w-9 h-9 rounded-full bg-surface-400 text-100 cursor-pointer"
		>
			@icons.MagnifyingGlass(icons.Props{
				Size: "20",
			})
		</button>
		<!-- Spotlight Trigger -->
		<div @keydown.window="handleShortcut($event)"></div>
		<!-- Spotlight Modal -->
		<div
			@keydown.escape.window="close()"
			class="fixed inset-0 bg-gray-800 bg-opacity-50 flex items-center justify-center z-50 w-screen"
			x-show="isOpen"
			x-cloak
		>
			<div
				class="flex flex-col bg-surface-200 p-6 rounded-lg shadow-lg w-2/3 max-h-[400px]"
				@click.away="close()"
				x-transition
			>
				<!-- Search Input -->
				<input
					hx-ext="stream"
					type="text"
					@keydown.up="highlightPrevious"
					@keydown.down="highlightNext"
					@keydown.enter="goToLink"
					class="w-full border-200 rounded-lg px-4 py-2 focus:ring-2 focus:ring-primary-500 focus:outline-none bg-surface-100 text-100"
					placeholder={ intl.MustT(ctx, "Spotlight.Placeholder") }
					hx-get="/spotlight/search"
					hx-trigger="input changed delay:250ms, search"
					hx-sync="this:replace"
					name="q"
					:hx-target="'#' + $id('spotlight')"
					:hx-indicator="'#' + $id('spinner')"
					autocomplete="off"
					x-ref="input"
				/>
				<div class="flex-1 min-h-0 mt-4 overflow-y-auto">
					<!-- Search Results -->
					<ul
						class="space-y-2"
						:id="$id('spotlight')"
					></ul>
					<!-- Spinner Loader -->
					<div class="hidden" :id="$id('spinner')">
						@loaders.Spinner(loaders.SpinnerProps{
							ContainerClass: templ.Classes(
								"flex justify-center items-center py-4",
							),
						})
					</div>
				</div>
			</div>
		</div>
	</div>
}

templ LinkItem(title, link string, icon templ.Component) {
	<a href={ templ.SafeURL(link) } class="flex items-center gap-2">
		if icon != nil {
			@icon
		}
		{ title }
	</a>
}

// SpotlightItem renders a single item in the Spotlight search results.
templ SpotlightItem(i int) {
	<li
		class={
			"border border-200 px-4 py-3 rounded-md cursor-pointer text-100",
			"hover:bg-primary-500 hover:text-white transition-all duration-200",
		}
		:class={ fmt.Sprintf("{'bg-primary-500 text-white': highlightedIndex === %d }", i) }
	>
		{ children... }
	</li>
}

// NotFound renders a message indicating that no search results were found.
templ NotFound() {
	<li class="text-center text-200">
		{ intl.MustT(ctx, "Spotlight.NothingFound") }
	</li>
}

// SpotlightItems renders a list of search results in the Spotlight component.
// If no items are found, it displays a "nothing found" message.
templ SpotlightItems(items []templ.Component, startIdx int) {
	for i, item := range items {
		@SpotlightItem(startIdx + i) {
			@item
		}
	}
}
