name: Claude Issue Implementation Plan

on:
  issues:
    types: [opened]

jobs:
  implementation-plan:
    runs-on: blacksmith-8vcpu-ubuntu-2204
    permissions:
      contents: read
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Generate Implementation Plan
        id: claude-plan
        uses: anthropics/claude-code-action@beta
        with:
          base_branch: staging
          direct_prompt: |
            Analyze the issue and provide an implementation plan. The project uses DDD architecture with specific conventions documented in CLAUDE.md.

            **Issue Title:** ${{ github.event.issue.title }}
            **Issue Body:** 
            ${{ github.event.issue.body }}

            ## Implementation Plan for: ${{ github.event.issue.title }}

            ### Overview
            Brief summary of what needs to be implemented and the approach.

            ### Affected Components
            List specific modules and their components that need changes.

            ### Implementation Steps

            #### 1. Domain Layer
            Provide interfaces and types with signatures only:

            ```go
            // modules/{module}/domain/aggregates/{entity}/{entity}.go
            type Entity interface {
                ID() string
                // method signatures only
            }

            // modules/{module}/domain/aggregates/{entity}/{entity}_repository.go  
            type EntityRepository interface {
                FindByID(ctx context.Context, id string) (*Entity, error)
                // other methods needed
            }
            ```

            #### 2. Infrastructure Layer
            Database schema and repository implementation signatures:

            ```sql
            -- modules/{module}/infrastructure/persistence/schema/{module}-schema.sql
            CREATE TABLE IF NOT EXISTS table_name (
                -- column definitions
            );
            ```

            ```go
            // modules/{module}/infrastructure/persistence/{entity}_repository.go
            type entityRepository struct {
                db *sqlx.DB
            }

            func NewEntityRepository(db *sqlx.DB) domain.EntityRepository {
                // implementation left blank
            }

            func (r *entityRepository) FindByID(ctx context.Context, id string) (*domain.Entity, error) {
                // implementation left blank
            }
            ```

            #### 3. Service Layer
            Service interfaces and constructors:

            ```go
            // modules/{module}/services/{entity}_service.go
            type EntityService struct {
                repo domain.EntityRepository
                events pkg.EventPublisher
            }

            func NewEntityService(repo domain.EntityRepository, events pkg.EventPublisher) *EntityService {
                // implementation left blank
            }

            func (s *EntityService) CreateEntity(ctx context.Context, req CreateEntityRequest) (*EntityResponse, error) {
                // implementation left blank
            }
            ```

            #### 4. Presentation Layer
            Controller and DTO signatures:

            ```go
            // modules/{module}/presentation/controllers/dtos/{entity}_dto.go
            type CreateEntityDTO struct {
                Name string `json:"name" validate:"required"`
                // other fields
            }

            // modules/{module}/presentation/controllers/{entity}_controller.go
            type EntityController struct {
                service *services.EntityService
            }

            func NewEntityController(service *services.EntityService) *EntityController {
                // implementation left blank
            }

            func (c *EntityController) List(ctx *fiber.Ctx) error {
                // implementation left blank
            }
            ```

            #### 5. API Endpoints
            - `GET /api/v1/{module}/{entities}` - List entities
            - `POST /api/v1/{module}/{entities}` - Create entity
            - Include request/response types

            ### File Structure
            ```
            modules/{module}/
            ├── domain/
            │   └── aggregates/{entity}/
            │       ├── {entity}.go
            │       └── {entity}_repository.go
            ├── infrastructure/
            │   └── persistence/
            │       ├── {entity}_repository.go
            │       └── schema/{module}-schema.sql
            ├── services/
            │   └── {entity}_service.go
            └── presentation/
                ├── controllers/
                │   ├── {entity}_controller.go
                │   └── dtos/{entity}_dto.go
                └── locales/
                    ├── en.json
                    ├── ru.json
                    └── uz.json
            ```

            ### Testing Strategy
            - Domain unit tests: `{entity}_test.go`
            - Repository integration tests: `{entity}_repository_test.go`
            - Service tests: `{entity}_service_test.go`
            - Controller tests: `{entity}_controller_test.go`

            ### Localization Keys
            ```json
            {
              "NavigationLinks.{Module}": "Module Name",
              "Meta.{Module}.{Entity}.List.Title": "Entity List",
              "{Module}.{Entity}.Fields.Name": "Name"
            }
            ```

            ### Definition of Done
            - [ ] All interfaces and types defined
            - [ ] Repository methods implemented
            - [ ] Service logic complete
            - [ ] API endpoints working
            - [ ] Tests passing
            - [ ] Localization complete
            - [ ] Module registered in module.go

            **Note:** Focus on signatures and structure. Implementation details are left blank.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mcp_config: |
            {
              "mcpServers": {
                "context7": {
                  "type": "http",
                  "url": "https://mcp.context7.com/mcp",
                  "name": "context7"
                },
                "godoc-mcp": {
                  "command": "go",
                  "args": ["run", "github.com/mrjoshuak/godoc-mcp@latest"]
                },
                "bloom": {
                  "type": "http",
                  "url": "https://api.bloom.pw/api/mcp",
                  "name": "bloom",
                  "headers": {
                    "Authorization": "Bearer ${{ secrets.BLOOM_MCP_TOKEN }}"
                  }
                }
              }
            }