name: Claude â€” PR Review (inline)

on:
  pull_request:
    types: [opened, reopened, synchronize, ready_for_review]

permissions:
  contents: read
  pull-requests: write
  issues: write
  id-token: write

jobs:
  review:
    if: github.event.pull_request.draft == false
    uses: iota-uz/.github/.github/workflows/cc-shared-review.yml@main
    secrets:
      ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      BLOOM_MCP_TOKEN: ${{ secrets.BLOOM_MCP_TOKEN }}
    with:
      base_branch: staging
      tech_stack: iota-sdk
      allowed_tools: |
        WebSearch
        WebFetch
        Bash(find:*)
        Bash(grep:*)
        Bash(ls:*)
        Bash(cat:*)
        Bash(head:*)
        Bash(tail:*)
        Bash(wc:*)
        Bash(tree:*)
        Bash(gh label:*)
        Bash(gh issue:*)
        Bash(gh project:*)
        mcp__context7__resolve-library-id
        mcp__context7__get-library-docs
        mcp__godoc-mcp__get_doc
        mcp__bloom__search_code
      disallowed_tools: |
        Edit
        MultiEdit
        NotebookEdit
        Write
      prompt: |
        **Additional Context:**
        This application follows Domain-Driven Design (DDD) architecture with strict layer separation.
        Pay special attention to DDD principles and ensure proper separation between domain, infrastructure, services, and presentation layers.
        
        **Documentation Requirements:**
        - All exported types, functions, methods, and constants MUST have Go doc comments
        - Doc comments should start with the name of the thing being documented
        - Examples: `// User represents...`, `// NewUser creates...`, `// GetUserByID retrieves...`
        - Flag any missing documentation on public APIs as a Minor ðŸŸ¡ issue
        - Ensure doc comments are clear, complete, and follow Go documentation conventions
      mcp_config: |
        {
          "mcpServers": {
            "context7": {
              "type": "http",
              "url": "https://mcp.context7.com/mcp",
              "name": "context7"
            },
            "godoc-mcp": {
              "command": "go",
              "args": ["run", "github.com/mrjoshuak/godoc-mcp@latest"]
            },
            "bloom": {
              "type": "http",
              "url": "https://api.bloom.pw/api/mcp",
              "name": "bloom",
              "headers": {
                "Authorization": "Bearer ${BLOOM_MCP_TOKEN}"
              }
            }
          }
        }