name: Claude Issue Implementation Plan

on:
  issues:
    types: [opened, labeled]

jobs:
  implementation-plan:
    runs-on: blacksmith-8vcpu-ubuntu-2204
    permissions:
      contents: read
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          ref: staging
          fetch-depth: 0

      - name: Generate Implementation Plan
        id: claude-plan
        uses: anthropics/claude-code-action@beta
        with:
          base_branch: staging
          allowed_tools: |
            WebSearch
            WebFetch
            Bash(find:*)
            Bash(grep:*)
            Bash(ls:*)
            Bash(cat:*)
            Bash(head:*)
            Bash(tail:*)
            Bash(wc:*)
            Bash(tree:*)
            Bash(gh:label:*)
            Bash(gh:issue:*)
          disallowed_tools: |
            Edit
            MultiEdit
            NotebookEdit
            Write
          direct_prompt: |
            Create a detailed implementation plan for this issue. Use the codebase search tools to understand the current implementation and web tools to research any external libraries or patterns mentioned.

            **Important:** You are in read-only mode and cannot edit files. Focus on analyzing and planning only.

            **Issue Title:** ${{ github.event.issue.title }}
            **Issue Body:** 
            ${{ github.event.issue.body }}
            **Current Labels:** ${{ join(github.event.issue.labels.*.name, ', ') }}

            ## Your Task:
            1. Analyze the issue thoroughly
            2. Search the codebase to understand current implementation
            3. For any external libraries or technologies mentioned, use WebSearch and WebFetch to gather relevant documentation
            4. Create a detailed plan listing exactly which files need to be modified and how
            5. If the issue doesn't have any labels yet, apply appropriate labels using `gh issue edit ${{ github.event.issue.number }} --add-label "label1,label2"`. First check available labels with `gh label list --repo ${{ github.repository }}` and only use existing labels

            ## Required Output Format:

            ### üìã Issue Analysis
            **Type:** [Bug/Feature/Enhancement/Performance/Security]
            **Summary:** [Brief description of what needs to be done]

            ### üîç Codebase Investigation
            [Your findings from searching the codebase - include specific file paths and line numbers]

            ### üìö External Research
            [If any external libraries/APIs are involved, include relevant documentation snippets here]
            [Use WebSearch and WebFetch to gather this information]

            ### üìÅ Files to Modify

            **For Features/Enhancements:**
            List each file that needs to be created or modified with a brief description of changes:

            ```
            CREATE: modules/{module}/domain/aggregates/{entity}/{entity}.go
            - Define the entity interface with methods [list methods]
            - Add business logic for [specific functionality]

            MODIFY: modules/{module}/infrastructure/persistence/models/models.go
            - Add new model struct for [entity]
            - Include fields: [list key fields]

            CREATE: modules/{module}/infrastructure/persistence/{entity}_repository.go
            - Implement repository interface
            - Add CRUD operations with proper error handling

            [Continue for all files...]
            ```

            **For Bugs:**
            Identify the root cause and affected files:

            ```
            ROOT CAUSE: [Explain the bug's origin]

            MODIFY: path/to/file.go:LineNumber
            - Current behavior: [what's wrong]
            - Fix: [what needs to change]
            - Reason: [why this fixes it]

            [List all files that need fixes...]
            ```

            ### üß™ Testing Strategy
            - Which test files need to be created/modified
            - Key test scenarios to cover
            - Integration test requirements

            ### üöÄ Implementation Steps
            1. [First concrete step]
            2. [Second concrete step]
            3. [Continue with ordered steps...]

            ### ‚ö†Ô∏è Risks & Considerations
            - [List any technical risks]
            - [Breaking changes]
            - [Performance implications]

            ### ‚úÖ Definition of Done
            - [ ] All listed files created/modified
            - [ ] Tests written and passing
            - [ ] API endpoints functional (if applicable)
            - [ ] Localization updated (if UI changes)
            - [ ] Code follows DDD patterns
            - [ ] No linting errors

            ### üí° Notes for Implementation
            [Any additional context, tips, or warnings for the developer who will implement this]

            ---
            **Important:** Be specific about file paths and changes. This plan will be reviewed by a senior engineer before implementation.
          anthropic_api_key: ${{ secrets.ANTHROPIC_API_KEY }}
          mcp_config: |
            {
              "mcpServers": {
                "context7": {
                  "type": "http",
                  "url": "https://mcp.context7.com/mcp",
                  "name": "context7"
                },
                "godoc-mcp": {
                  "command": "go",
                  "args": ["run", "github.com/mrjoshuak/godoc-mcp@latest"]
                },
                "bloom": {
                  "type": "http",
                  "url": "https://api.bloom.pw/api/mcp",
                  "name": "bloom",
                  "headers": {
                    "Authorization": "Bearer ${{ secrets.BLOOM_MCP_TOKEN }}"
                  }
                }
              }
            }
