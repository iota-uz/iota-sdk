# Auto-generated by scripts/merge_schemas.sh - DO NOT EDIT MANUALLY
# Wed, Apr  9, 2025  1:40:17 AM

# --- Merging ../modules/core/interfaces/graph/auth.graphql ---
type Session {
    token: String!
    userId: ID!
    ip: String!
    userAgent: String!
    expiresAt: Time!
    createdAt: Time!
}

extend type Mutation {
    authenticate(email: String!, password: String!): Session!
    googleAuthenticate: String!

    deleteSession(token: String!): Boolean!
}

extend type Subscription {
    sessionDeleted: ID!
}
# --- End ../modules/core/interfaces/graph/auth.graphql ---

# --- Merging ../modules/core/interfaces/graph/base.graphql ---
scalar Time
scalar Int64

directive @goModel(
    model: String
    models: [String!]
) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION

directive @goEnum(
    value: String
) on ENUM_VALUE

type Mutation {
    add(a: Int!, b: Int!): Int!
}

type Subscription {
    counter: Int!
}

# --- End ../modules/core/interfaces/graph/base.graphql ---

# --- Merging ../modules/core/interfaces/graph/uploads.graphql ---
scalar File

enum UploadType @goModel(model: "github.com/iota-uz/iota-sdk/modules/core/domain/entities/upload.UploadType") {
  Document @goEnum(value: "github.com/iota-uz/iota-sdk/modules/core/domain/entities/upload.UploadTypeDocument")
  Image @goEnum(value: "github.com/iota-uz/iota-sdk/modules/core/domain/entities/upload.UploadTypeImage")
}

type Upload {
  id: ID!
  url: String!
  hash: String!
  path: String!
  name: String!
  mimetype: String!
  type: UploadType!
  size: Int!
}

input UploadFilter {
  mimeType: String
  mimeTypePrefix: String
  type: UploadType
}

extend type Mutation {
  uploadFile(file: File): Upload!
}

extend type Query {
  uploads(filter: UploadFilter!): [Upload!]!
}

# --- End ../modules/core/interfaces/graph/uploads.graphql ---

# --- Merging ../modules/core/interfaces/graph/users.graphql ---
type User {
    id: ID!
    firstName: String!
    lastName: String!
    email: String!
    uiLanguage: String!
    updatedAt: Time!
    createdAt: Time!
}

type PaginatedUsers {
    data: [User!]!
    total: Int64!
}

extend type Query {
    user(id: ID!): User
    users(offset: Int!, limit: Int!, sortBy: [Int!], ascending: Boolean!): PaginatedUsers!
}

# --- End ../modules/core/interfaces/graph/users.graphql ---

# --- Merging ../modules/warehouse/interfaces/graph/base.graphql ---
#scalar Time
#scalar Int64
# --- End ../modules/warehouse/interfaces/graph/base.graphql ---

# --- Merging ../modules/warehouse/interfaces/graph/inventory.graphql ---
type InventoryPosition {
    id: ID!
    title: String!
    tags: [String!]!
}

input InventoryItem {
    positionId: ID!
    found: Int!
}

extend type Query {
    inventory: [InventoryPosition!]!
}

extend type Mutation {
    completeInventoryCheck(items: [InventoryItem!]!): Boolean!
}

# --- End ../modules/warehouse/interfaces/graph/inventory.graphql ---

# --- Merging ../modules/warehouse/interfaces/graph/orders.graphql ---
type OrderItem {
    position: WarehousePosition!
    products: [Product!]!
    quantity: Int!
}

type Order {
    id: ID!
    type: String!
    status: String!
    items: [OrderItem!]!
    createdAt: Time!
}

type PaginatedOrders {
    data: [Order!]!
    total: Int64!
}

input OrderQuery {
    type: String
    status: String
    limit: Int!
    offset: Int!
    sortBy: [String!]
}

extend type Query {
    order(id: ID!): Order
    orders(query: OrderQuery!): PaginatedOrders!
    completeOrder(id: ID!): Order
}

# --- End ../modules/warehouse/interfaces/graph/orders.graphql ---

# --- Merging ../modules/warehouse/interfaces/graph/position.graphql ---
type WarehousePosition {
    id: ID!
    title: String!
    barcode: String!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedWarehousePositions {
    data: [WarehousePosition!]!
    total: Int64!
}

extend type Query {
    warehousePosition(id: ID!): WarehousePosition
    warehousePositions(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedWarehousePositions!
}

# --- End ../modules/warehouse/interfaces/graph/position.graphql ---

# --- Merging ../modules/warehouse/interfaces/graph/product.graphql ---
type Product {
    id: ID!
    position: WarehousePosition!
    positionID: ID!
    rfid: String!
    status: String!
    createdAt: Time!
    updatedAt: Time!
}

type PaginatedProducts {
    data: [Product!]!
    total: Int64!
}

input CreateProductsFromTags {
    positionId: ID!
    tags: [String!]!
}

type ValidateProductsResult {
    valid: [String!]!
    invalid: [String!]!
}

extend type Query {
    product(id: ID!): Product
    products(offset: Int!, limit: Int!, sortBy: [String!]): PaginatedProducts!
    createProductsFromTags(input: CreateProductsFromTags!): [Product!]!
    validateProducts(tags: [String!]!): ValidateProductsResult!
}

# --- End ../modules/warehouse/interfaces/graph/product.graphql ---

