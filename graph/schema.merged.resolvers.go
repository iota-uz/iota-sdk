package graph

// This file will be automatically regenerated based on the schema, any resolver implementations
// will be copied through when generating and any unknown code will be moved to the end.
// Code generated by github.com/99designs/gqlgen version v0.17.57

import (
	"context"
	"fmt"

	"github.com/99designs/gqlgen/graphql"
)

// Add is the resolver for the add field.
func (r *mutationResolver) Add(ctx context.Context, a int, b int) (int, error) {
	panic(fmt.Errorf("FIX ME: not implemented: Add - add"))
}

// Authenticate is the resolver for the authenticate field.
func (r *mutationResolver) Authenticate(ctx context.Context, email string, password string) (*Session, error) {
	panic(fmt.Errorf("not implemented: Authenticate - authenticate"))
}

// GoogleAuthenticate is the resolver for the googleAuthenticate field.
func (r *mutationResolver) GoogleAuthenticate(ctx context.Context) (string, error) {
	panic(fmt.Errorf("not implemented: GoogleAuthenticate - googleAuthenticate"))
}

// DeleteSession is the resolver for the deleteSession field.
func (r *mutationResolver) DeleteSession(ctx context.Context, token string) (bool, error) {
	panic(fmt.Errorf("not implemented: DeleteSession - deleteSession"))
}

// UploadFile is the resolver for the uploadFile field.
func (r *mutationResolver) UploadFile(ctx context.Context, file *graphql.Upload) (*Upload, error) {
	panic(fmt.Errorf("not implemented: UploadFile - uploadFile"))
}

// CompleteInventoryCheck is the resolver for the completeInventoryCheck field.
func (r *mutationResolver) CompleteInventoryCheck(ctx context.Context, items []*InventoryItem) (bool, error) {
	panic(fmt.Errorf("not implemented: CompleteInventoryCheck - completeInventoryCheck"))
}

// Uploads is the resolver for the uploads field.
func (r *queryResolver) Uploads(ctx context.Context, filter UploadFilter) ([]*Upload, error) {
	panic(fmt.Errorf("not implemented: Uploads - uploads"))
}

// User is the resolver for the user field.
func (r *queryResolver) User(ctx context.Context, id int64) (*User, error) {
	user, err := r.coreResolver.Query().User(ctx, id)
	if err != nil {
		return nil, err
	}
	return (*User)(user), nil
}

// Users is the resolver for the users field.
func (r *queryResolver) Users(ctx context.Context, offset int, limit int, sortBy []int, ascending bool) (*PaginatedUsers, error) {
	panic(fmt.Errorf("not implemented: Users - users"))
}

// Inventory is the resolver for the inventory field.
func (r *queryResolver) Inventory(ctx context.Context) ([]*InventoryPosition, error) {
	panic(fmt.Errorf("not implemented: Inventory - inventory"))
}

// Order is the resolver for the order field.
func (r *queryResolver) Order(ctx context.Context, id int64) (*Order, error) {
	panic(fmt.Errorf("not implemented: Order - order"))
}

// Orders is the resolver for the orders field.
func (r *queryResolver) Orders(ctx context.Context, query OrderQuery) (*PaginatedOrders, error) {
	panic(fmt.Errorf("not implemented: Orders - orders"))
}

// CompleteOrder is the resolver for the completeOrder field.
func (r *queryResolver) CompleteOrder(ctx context.Context, id int64) (*Order, error) {
	panic(fmt.Errorf("not implemented: CompleteOrder - completeOrder"))
}

// WarehousePosition is the resolver for the warehousePosition field.
func (r *queryResolver) WarehousePosition(ctx context.Context, id int64) (*WarehousePosition, error) {
	pos, err := r.warehouseResolver.Query().WarehousePosition(ctx, id)
	if err != nil {
		return nil, err
	}
	return (*WarehousePosition)(pos), nil
}

// WarehousePositions is the resolver for the warehousePositions field.
func (r *queryResolver) WarehousePositions(ctx context.Context, offset int, limit int, sortBy []string) (*PaginatedWarehousePositions, error) {
	panic(fmt.Errorf("not implemented: WarehousePositions - warehousePositions"))
}

// Product is the resolver for the product field.
func (r *queryResolver) Product(ctx context.Context, id int64) (*Product, error) {
	panic(fmt.Errorf("not implemented: Product - product"))
}

// Products is the resolver for the products field.
func (r *queryResolver) Products(ctx context.Context, offset int, limit int, sortBy []string) (*PaginatedProducts, error) {
	panic(fmt.Errorf("not implemented: Products - products"))
}

// CreateProductsFromTags is the resolver for the createProductsFromTags field.
func (r *queryResolver) CreateProductsFromTags(ctx context.Context, input CreateProductsFromTags) ([]*Product, error) {
	panic(fmt.Errorf("not implemented: CreateProductsFromTags - createProductsFromTags"))
}

// ValidateProducts is the resolver for the validateProducts field.
func (r *queryResolver) ValidateProducts(ctx context.Context, tags []string) (*ValidateProductsResult, error) {
	panic(fmt.Errorf("not implemented: ValidateProducts - validateProducts"))
}

// Counter is the resolver for the counter field.
func (r *subscriptionResolver) Counter(ctx context.Context) (<-chan int, error) {
	panic(fmt.Errorf("not implemented: Counter - counter"))
}

// SessionDeleted is the resolver for the sessionDeleted field.
func (r *subscriptionResolver) SessionDeleted(ctx context.Context) (<-chan int64, error) {
	panic(fmt.Errorf("not implemented: SessionDeleted - sessionDeleted"))
}

// Mutation returns MutationResolver implementation.
func (r *Resolver) Mutation() MutationResolver { return &mutationResolver{r} }

// Query returns QueryResolver implementation.
func (r *Resolver) Query() QueryResolver { return &queryResolver{r} }

// Subscription returns SubscriptionResolver implementation.
func (r *Resolver) Subscription() SubscriptionResolver { return &subscriptionResolver{r} }

type mutationResolver struct{ *Resolver }
type queryResolver struct{ *Resolver }
type subscriptionResolver struct{ *Resolver }
