package ui

import (
	"fmt"
	"strings"

	icons "github.com/iota-uz/icons/phosphor"
	"github.com/iota-uz/iota-sdk/components/base/card"
	"github.com/iota-uz/iota-sdk/components/charts"
	"github.com/iota-uz/iota-sdk/pkg/composables"
	"github.com/iota-uz/iota-sdk/pkg/lens"
	"github.com/iota-uz/iota-sdk/pkg/types"
)

// preparePieChartData formats analytics categories for pie chart display
func preparePieChartData(categories []lens.AnalyticsCategory, pgCtx *types.PageContext) charts.ChartOptions {
	if categories == nil || len(categories) == 0 {
		return charts.ChartOptions{}
	}

	// Pre-allocate slices for better performance
	series := make([]float64, 0, len(categories))
	labels := make([]string, 0, len(categories))
	colors := make([]string, 0, len(categories))
	percentages := make([]string, 0, len(categories))

	for _, category := range categories {
		// Only include categories that have data
		if category.Value > 0 {
			labels = append(labels, pgCtx.T(category.Key))
			colors = append(colors, category.Color)
			series = append(series, category.Value)
			percentages = append(percentages, category.Percentage)
		}
	}

	// If no data, return empty chart options
	if len(series) == 0 {
		return charts.ChartOptions{}
	}

	// Convert to interface slice for pie chart
	interfaceSeries := make([]interface{}, len(series))
	for i, v := range series {
		interfaceSeries[i] = v
	}

	return charts.ChartOptions{
		Chart: charts.ChartConfig{
			Type:   charts.PieChartType,
			Height: "400",
		},
		Series: interfaceSeries, // For pie chart, series is directly an array of values
		Labels: labels,
		Colors: colors,
		Legend: &charts.LegendConfig{
			Position: &[]charts.LegendPosition{charts.LegendPositionBottom}[0],
			Show:     &[]bool{true}[0],
		},
		DataLabels: &charts.DataLabels{
			Enabled:   true,
			Formatter: templ.JSExpression(getPercentageFormatterWithData(percentages)),
		},
		Tooltip: &charts.TooltipConfig{},
	}
}

// getPercentageFormatterWithData returns a formatter that uses pre-calculated percentages
func getPercentageFormatterWithData(percentages []string) string {
	// Escape percentages to prevent XSS
	escapedPercentages := make([]string, len(percentages))
	for i, p := range percentages {
		// Replace any quotes and backslashes to prevent JS injection
		escaped := strings.ReplaceAll(p, `\`, `\\`)
		escaped = strings.ReplaceAll(escaped, `"`, `\"`)
		escaped = strings.ReplaceAll(escaped, `'`, `\'`)
		escaped = strings.ReplaceAll(escaped, `<`, `\u003C`)
		escaped = strings.ReplaceAll(escaped, `>`, `\u003E`)
		escapedPercentages[i] = escaped
	}

	percentagesJson := "["
	for i, p := range escapedPercentages {
		if i > 0 {
			percentagesJson += ","
		}
		percentagesJson += fmt.Sprintf(`"%s"`, p)
	}
	percentagesJson += "]"

	return fmt.Sprintf(`function(value, opts) {
		var percentages = %s;
		var index = opts.seriesIndex;
		return percentages[index] || '';
	}`, percentagesJson)
}

templ AnalyticsDetail(config lens.AnalyticsDetailConfig) {
	{{ pgCtx := composables.UsePageCtx(ctx) }}
	{{ chartOptions := preparePieChartData(config.Categories, pgCtx) }}
	<div class="flex min-h-screen w-full flex-col">
		<div class="flex-1 space-y-6 p-4 sm:p-6">
			<!-- Header Section -->
			<div class="bg-white border border-gray-200 rounded-lg shadow-sm">
				<div class="flex items-center justify-between p-6">
					<div class="flex items-center gap-4">
						<div class="p-3 bg-blue-600 rounded-lg">
							if config.DataType == "revenue" {
								@templ.Raw(config.RevenueIcon)
							} else {
								@templ.Raw(config.CountIcon)
							}
						</div>
						<div>
							<h1 class="text-2xl sm:text-3xl font-bold text-gray-900">
								{ config.Title }
							</h1>
							<p class="text-sm sm:text-base text-gray-600 mt-1">
								{ config.Date.Format("02 January 2006") }
							</p>
						</div>
					</div>
					<div class="flex items-center gap-2">
						<a
							href={ templ.URL(config.BackURL) }
							class="inline-flex items-center gap-2 px-4 py-2 text-sm font-medium text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500"
						>
							@icons.ArrowLeft(icons.Props{Size: "16"})
							{ pgCtx.T("Back") }
						</a>
					</div>
				</div>
			</div>
			<!-- Tabs Section with Navigation -->
			<div class="bg-white border border-gray-200 rounded-lg shadow-sm">
				<div class="border-b border-gray-200">
					<div class="flex items-center justify-between px-6">
						<!-- Left Arrow -->
						{{
							prevDate := config.Date.AddDate(0, 0, -1).Format("02.01")
							nextDate := config.Date.AddDate(0, 0, 1).Format("02.01")
						}}
						<a
							href={ templ.URL(fmt.Sprintf("%s/%s/%s", config.BaseURL, config.DataType, prevDate)) }
							class="inline-flex items-center gap-1 px-3 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 my-3 transition-colors"
							title={ pgCtx.T("Analytics.PreviousDay") }
						>
							@icons.CaretLeft(icons.Props{Size: "16"})
							<span class="text-sm font-medium">{ prevDate }</span>
						</a>
						<!-- Centered Tabs -->
						<nav class="-mb-px flex space-x-12" aria-label="Tabs">
							{{
								revenueClass := "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
								countClass := "border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300"
								if config.DataType == "revenue" {
									revenueClass = "border-blue-500 text-blue-600"
								} else {
									countClass = "border-blue-500 text-blue-600"
								}
							}}
							<a
								href={ templ.URL(fmt.Sprintf("%s/revenue/%s", config.BaseURL, config.Date.Format("02.01"))) }
								class={ fmt.Sprintf("whitespace-nowrap py-4 px-2 border-b-2 font-medium text-base %s", revenueClass) }
							>
								@templ.Raw(config.RevenueIcon)
								{ pgCtx.T("Analytics.Revenue") }
							</a>
							<a
								href={ templ.URL(fmt.Sprintf("%s/count/%s", config.BaseURL, config.Date.Format("02.01"))) }
								class={ fmt.Sprintf("whitespace-nowrap py-4 px-2 border-b-2 font-medium text-base %s", countClass) }
							>
								@templ.Raw(config.CountIcon)
								{ pgCtx.T("Analytics.Count") }
							</a>
						</nav>
						<!-- Right Arrow -->
						<a
							href={ templ.URL(fmt.Sprintf("%s/%s/%s", config.BaseURL, config.DataType, nextDate)) }
							class="inline-flex items-center gap-1 px-3 py-2 text-gray-700 bg-white border border-gray-300 rounded-lg hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 my-3 transition-colors"
							title={ pgCtx.T("Analytics.NextDay") }
						>
							<span class="text-sm font-medium">{ nextDate }</span>
							@icons.CaretRight(icons.Props{Size: "16"})
						</a>
					</div>
				</div>
			</div>
			<!-- Content Section -->
			<div class="grid grid-cols-1 lg:grid-cols-12 gap-6">
				<!-- Chart Section -->
				<div class="lg:col-span-8">
					{{
						headerTitle := pgCtx.T("Analytics.RevenueByCategory")
						if config.DataType != "revenue" {
							headerTitle = pgCtx.T("Analytics.CountByCategory")
						}
					}}
					@card.Card(card.Props{
						Header:       card.DefaultHeader(headerTitle),
						WrapperClass: "h-full",
					}) {
						<div class="flex items-center justify-center min-h-[400px]">
							{{
								hasVisibleData := false
								for _, category := range config.Categories {
									if category.Value > 0 {
										hasVisibleData = true
										break
									}
								}
							}}
							if !hasVisibleData {
								<div class="text-center text-gray-500">
									<p class="text-lg font-medium">{ pgCtx.T("Analytics.NoDataTitle") }</p>
									<p class="text-sm mt-2">{ pgCtx.T("Analytics.NoDataDescription") }</p>
									<p class="text-xs mt-1 text-gray-400">{ fmt.Sprintf("%s: %d", pgCtx.T("Analytics.Categories"), len(config.Categories)) }</p>
								</div>
							} else {
								@charts.Chart(charts.Props{
									Class:   "w-full h-full",
									Options: chartOptions,
								})
							}
						</div>
					}
				</div>
				<!-- Statistics Section -->
				<div class="lg:col-span-4">
					@card.Card(card.Props{
						Header:       card.DefaultHeader(pgCtx.T("Analytics.CategoryBreakdown")),
						WrapperClass: "h-full",
					}) {
						<div class="space-y-4">
							{{ hasData := false }}
							for _, category := range config.Categories {
								if category.Value > 0 {
									{{ hasData = true }}
									<div class="flex items-center justify-between p-3 bg-gray-50 rounded-lg">
										<div class="flex items-center gap-3">
											<div
												class="w-4 h-4 rounded-full"
												style={ templ.SafeCSS("background-color: " + category.Color) }
											></div>
											<div>
												<p class="font-medium text-gray-900">
													{ pgCtx.T(category.Key) }
												</p>
												<p class="text-sm text-gray-600">
													{ category.Percentage }
												</p>
											</div>
										</div>
										<div class="text-right">
											<p class="font-bold text-gray-900">
												{ category.FormattedValue }
											</p>
										</div>
									</div>
								}
							}
							if !hasData {
								<div class="text-center text-gray-500 py-8">
									<p class="text-lg font-medium">{ pgCtx.T("Analytics.NoDataTitle") }</p>
									<p class="text-sm mt-2">{ pgCtx.T("Analytics.NoDataDescription") }</p>
								</div>
							}
						</div>
					}
				</div>
			</div>
		</div>
	</div>
}
